
Final_Project_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000014b8  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000178  00800180  00800180  000015cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001775  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a06  00000000  00000000  00002ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dae  00000000  00000000  000038d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00004688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000663  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b44  00000000  00000000  0000502b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005b6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f3 c1       	rjmp	.+998    	; 0x404 <__vector_7>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	a4 c1       	rjmp	.+840    	; 0x392 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	e5 c1       	rjmp	.+970    	; 0x420 <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 eb       	ldi	r30, 0xB8	; 184
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 38       	cpi	r26, 0x80	; 128
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a0 e8       	ldi	r26, 0x80	; 128
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3f       	cpi	r26, 0xF8	; 248
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4c d6       	rcall	.+3224   	; 0xd5c <main>
      c4:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <USART0_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ca:	1b b8       	out	0x0b, r1	; 11
      cc:	28 e9       	ldi	r18, 0x98	; 152
      ce:	2a b9       	out	0x0a, r18	; 10
      d0:	26 e0       	ldi	r18, 0x06	; 6
      d2:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
      d6:	60 38       	cpi	r22, 0x80	; 128
      d8:	25 e2       	ldi	r18, 0x25	; 37
      da:	72 07       	cpc	r23, r18
      dc:	81 05       	cpc	r24, r1
      de:	91 05       	cpc	r25, r1
      e0:	29 f4       	brne	.+10     	; 0xec <USART0_init+0x22>
      e2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
      e6:	87 e6       	ldi	r24, 0x67	; 103
      e8:	89 b9       	out	0x09, r24	; 9
      ea:	08 95       	ret
      ec:	60 34       	cpi	r22, 0x40	; 64
      ee:	28 e3       	ldi	r18, 0x38	; 56
      f0:	72 07       	cpc	r23, r18
      f2:	81 05       	cpc	r24, r1
      f4:	91 05       	cpc	r25, r1
      f6:	29 f4       	brne	.+10     	; 0x102 <USART0_init+0x38>
      f8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
      fc:	84 e4       	ldi	r24, 0x44	; 68
      fe:	89 b9       	out	0x09, r24	; 9
     100:	08 95       	ret
     102:	61 15       	cp	r22, r1
     104:	2b e4       	ldi	r18, 0x4B	; 75
     106:	72 07       	cpc	r23, r18
     108:	81 05       	cpc	r24, r1
     10a:	91 05       	cpc	r25, r1
     10c:	29 f4       	brne	.+10     	; 0x118 <USART0_init+0x4e>
     10e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     112:	83 e3       	ldi	r24, 0x33	; 51
     114:	89 b9       	out	0x09, r24	; 9
     116:	08 95       	ret
     118:	60 38       	cpi	r22, 0x80	; 128
     11a:	20 e7       	ldi	r18, 0x70	; 112
     11c:	72 07       	cpc	r23, r18
     11e:	81 05       	cpc	r24, r1
     120:	91 05       	cpc	r25, r1
     122:	29 f4       	brne	.+10     	; 0x12e <USART0_init+0x64>
     124:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     128:	82 e2       	ldi	r24, 0x22	; 34
     12a:	89 b9       	out	0x09, r24	; 9
     12c:	08 95       	ret
     12e:	61 15       	cp	r22, r1
     130:	26 e9       	ldi	r18, 0x96	; 150
     132:	72 07       	cpc	r23, r18
     134:	81 05       	cpc	r24, r1
     136:	91 05       	cpc	r25, r1
     138:	29 f4       	brne	.+10     	; 0x144 <USART0_init+0x7a>
     13a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     13e:	89 e1       	ldi	r24, 0x19	; 25
     140:	89 b9       	out	0x09, r24	; 9
     142:	08 95       	ret
     144:	61 15       	cp	r22, r1
     146:	21 ee       	ldi	r18, 0xE1	; 225
     148:	72 07       	cpc	r23, r18
     14a:	81 05       	cpc	r24, r1
     14c:	91 05       	cpc	r25, r1
     14e:	29 f4       	brne	.+10     	; 0x15a <USART0_init+0x90>
     150:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     154:	80 e1       	ldi	r24, 0x10	; 16
     156:	89 b9       	out	0x09, r24	; 9
     158:	08 95       	ret
     15a:	61 15       	cp	r22, r1
     15c:	2c e2       	ldi	r18, 0x2C	; 44
     15e:	72 07       	cpc	r23, r18
     160:	21 e0       	ldi	r18, 0x01	; 1
     162:	82 07       	cpc	r24, r18
     164:	91 05       	cpc	r25, r1
     166:	29 f4       	brne	.+10     	; 0x172 <USART0_init+0xa8>
     168:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     16c:	8c e0       	ldi	r24, 0x0C	; 12
     16e:	89 b9       	out	0x09, r24	; 9
     170:	08 95       	ret
     172:	61 15       	cp	r22, r1
     174:	72 4c       	sbci	r23, 0xC2	; 194
     176:	81 40       	sbci	r24, 0x01	; 1
     178:	91 05       	cpc	r25, r1
     17a:	21 f4       	brne	.+8      	; 0x184 <USART0_init+0xba>
     17c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     180:	88 e0       	ldi	r24, 0x08	; 8
     182:	89 b9       	out	0x09, r24	; 9
     184:	08 95       	ret

00000186 <USART1_init>:
     186:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     18a:	28 e9       	ldi	r18, 0x98	; 152
     18c:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     190:	26 e0       	ldi	r18, 0x06	; 6
     192:	20 93 9d 00 	sts	0x009D, r18	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     196:	60 38       	cpi	r22, 0x80	; 128
     198:	25 e2       	ldi	r18, 0x25	; 37
     19a:	72 07       	cpc	r23, r18
     19c:	81 05       	cpc	r24, r1
     19e:	91 05       	cpc	r25, r1
     1a0:	31 f4       	brne	.+12     	; 0x1ae <USART1_init+0x28>
     1a2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     1a6:	87 e6       	ldi	r24, 0x67	; 103
     1a8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     1ac:	08 95       	ret
     1ae:	60 34       	cpi	r22, 0x40	; 64
     1b0:	28 e3       	ldi	r18, 0x38	; 56
     1b2:	72 07       	cpc	r23, r18
     1b4:	81 05       	cpc	r24, r1
     1b6:	91 05       	cpc	r25, r1
     1b8:	31 f4       	brne	.+12     	; 0x1c6 <USART1_init+0x40>
     1ba:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     1be:	84 e4       	ldi	r24, 0x44	; 68
     1c0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     1c4:	08 95       	ret
     1c6:	61 15       	cp	r22, r1
     1c8:	2b e4       	ldi	r18, 0x4B	; 75
     1ca:	72 07       	cpc	r23, r18
     1cc:	81 05       	cpc	r24, r1
     1ce:	91 05       	cpc	r25, r1
     1d0:	31 f4       	brne	.+12     	; 0x1de <USART1_init+0x58>
     1d2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     1d6:	83 e3       	ldi	r24, 0x33	; 51
     1d8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     1dc:	08 95       	ret
     1de:	60 38       	cpi	r22, 0x80	; 128
     1e0:	20 e7       	ldi	r18, 0x70	; 112
     1e2:	72 07       	cpc	r23, r18
     1e4:	81 05       	cpc	r24, r1
     1e6:	91 05       	cpc	r25, r1
     1e8:	31 f4       	brne	.+12     	; 0x1f6 <USART1_init+0x70>
     1ea:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     1ee:	82 e2       	ldi	r24, 0x22	; 34
     1f0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     1f4:	08 95       	ret
     1f6:	61 15       	cp	r22, r1
     1f8:	26 e9       	ldi	r18, 0x96	; 150
     1fa:	72 07       	cpc	r23, r18
     1fc:	81 05       	cpc	r24, r1
     1fe:	91 05       	cpc	r25, r1
     200:	31 f4       	brne	.+12     	; 0x20e <USART1_init+0x88>
     202:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     206:	89 e1       	ldi	r24, 0x19	; 25
     208:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     20c:	08 95       	ret
     20e:	61 15       	cp	r22, r1
     210:	21 ee       	ldi	r18, 0xE1	; 225
     212:	72 07       	cpc	r23, r18
     214:	81 05       	cpc	r24, r1
     216:	91 05       	cpc	r25, r1
     218:	31 f4       	brne	.+12     	; 0x226 <USART1_init+0xa0>
     21a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     21e:	80 e1       	ldi	r24, 0x10	; 16
     220:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     224:	08 95       	ret
     226:	61 15       	cp	r22, r1
     228:	2c e2       	ldi	r18, 0x2C	; 44
     22a:	72 07       	cpc	r23, r18
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	82 07       	cpc	r24, r18
     230:	91 05       	cpc	r25, r1
     232:	31 f4       	brne	.+12     	; 0x240 <USART1_init+0xba>
     234:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     238:	8c e0       	ldi	r24, 0x0C	; 12
     23a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     23e:	08 95       	ret
     240:	61 15       	cp	r22, r1
     242:	72 4c       	sbci	r23, 0xC2	; 194
     244:	81 40       	sbci	r24, 0x01	; 1
     246:	91 05       	cpc	r25, r1
     248:	29 f4       	brne	.+10     	; 0x254 <USART1_init+0xce>
     24a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     24e:	88 e0       	ldi	r24, 0x08	; 8
     250:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     254:	08 95       	ret

00000256 <USART0_putch>:
     256:	5d 9b       	sbis	0x0b, 5	; 11
     258:	fe cf       	rjmp	.-4      	; 0x256 <USART0_putch>
     25a:	8c b9       	out	0x0c, r24	; 12
     25c:	08 95       	ret

0000025e <USART0_puts>:
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ec 01       	movw	r28, r24
     264:	88 81       	ld	r24, Y
     266:	88 23       	and	r24, r24
     268:	29 f0       	breq	.+10     	; 0x274 <USART0_puts+0x16>
     26a:	21 96       	adiw	r28, 0x01	; 1
     26c:	f4 df       	rcall	.-24     	; 0x256 <USART0_putch>
     26e:	89 91       	ld	r24, Y+
     270:	81 11       	cpse	r24, r1
     272:	fc cf       	rjmp	.-8      	; 0x26c <USART0_puts+0xe>
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <USART1_putch>:
     27a:	eb e9       	ldi	r30, 0x9B	; 155
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	90 81       	ld	r25, Z
     280:	95 ff       	sbrs	r25, 5
     282:	fd cf       	rjmp	.-6      	; 0x27e <USART1_putch+0x4>
     284:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     288:	08 95       	ret

0000028a <Commend>:
     28a:	ef e3       	ldi	r30, 0x3F	; 63
     28c:	ff e1       	ldi	r31, 0x1F	; 31
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <Commend+0x4>
     292:	00 c0       	rjmp	.+0      	; 0x294 <Commend+0xa>
     294:	00 00       	nop
     296:	15 ba       	out	0x15, r1	; 21
     298:	95 b3       	in	r25, 0x15	; 21
     29a:	28 2f       	mov	r18, r24
     29c:	20 7f       	andi	r18, 0xF0	; 240
     29e:	92 2b       	or	r25, r18
     2a0:	95 bb       	out	0x15, r25	; 21
     2a2:	f5 e0       	ldi	r31, 0x05	; 5
     2a4:	fa 95       	dec	r31
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <Commend+0x1a>
     2a8:	00 00       	nop
     2aa:	aa 9a       	sbi	0x15, 2	; 21
     2ac:	35 e0       	ldi	r19, 0x05	; 5
     2ae:	3a 95       	dec	r19
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <Commend+0x24>
     2b2:	00 00       	nop
     2b4:	aa 98       	cbi	0x15, 2	; 21
     2b6:	15 ba       	out	0x15, r1	; 21
     2b8:	25 b3       	in	r18, 0x15	; 21
     2ba:	e0 e1       	ldi	r30, 0x10	; 16
     2bc:	8e 9f       	mul	r24, r30
     2be:	c0 01       	movw	r24, r0
     2c0:	11 24       	eor	r1, r1
     2c2:	82 2b       	or	r24, r18
     2c4:	85 bb       	out	0x15, r24	; 21
     2c6:	f5 e0       	ldi	r31, 0x05	; 5
     2c8:	fa 95       	dec	r31
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Commend+0x3e>
     2cc:	00 00       	nop
     2ce:	aa 9a       	sbi	0x15, 2	; 21
     2d0:	35 e0       	ldi	r19, 0x05	; 5
     2d2:	3a 95       	dec	r19
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <Commend+0x48>
     2d6:	00 00       	nop
     2d8:	aa 98       	cbi	0x15, 2	; 21
     2da:	08 95       	ret

000002dc <LCD_init>:
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	84 bb       	out	0x14, r24	; 20
     2e0:	15 ba       	out	0x15, r1	; 21
     2e2:	8f e5       	ldi	r24, 0x5F	; 95
     2e4:	9a ee       	ldi	r25, 0xEA	; 234
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_init+0xa>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_init+0x10>
     2ec:	00 00       	nop
     2ee:	80 e2       	ldi	r24, 0x20	; 32
     2f0:	85 bb       	out	0x15, r24	; 21
     2f2:	ef e1       	ldi	r30, 0x1F	; 31
     2f4:	fe e4       	ldi	r31, 0x4E	; 78
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_init+0x1a>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_init+0x20>
     2fc:	00 00       	nop
     2fe:	85 bb       	out	0x15, r24	; 21
     300:	ef e8       	ldi	r30, 0x8F	; 143
     302:	f1 e0       	ldi	r31, 0x01	; 1
     304:	31 97       	sbiw	r30, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <LCD_init+0x28>
     308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_init+0x2e>
     30a:	00 00       	nop
     30c:	85 bb       	out	0x15, r24	; 21
     30e:	bd df       	rcall	.-134    	; 0x28a <Commend>
     310:	88 e2       	ldi	r24, 0x28	; 40
     312:	bb df       	rcall	.-138    	; 0x28a <Commend>
     314:	8c e0       	ldi	r24, 0x0C	; 12
     316:	b9 df       	rcall	.-142    	; 0x28a <Commend>
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	b7 df       	rcall	.-146    	; 0x28a <Commend>
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	b5 cf       	rjmp	.-150    	; 0x28a <Commend>
     320:	08 95       	ret

00000322 <Data>:
     322:	ef e3       	ldi	r30, 0x3F	; 63
     324:	ff e1       	ldi	r31, 0x1F	; 31
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <Data+0x4>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <Data+0xa>
     32c:	00 00       	nop
     32e:	21 e0       	ldi	r18, 0x01	; 1
     330:	25 bb       	out	0x15, r18	; 21
     332:	95 b3       	in	r25, 0x15	; 21
     334:	38 2f       	mov	r19, r24
     336:	30 7f       	andi	r19, 0xF0	; 240
     338:	93 2b       	or	r25, r19
     33a:	95 bb       	out	0x15, r25	; 21
     33c:	f5 e0       	ldi	r31, 0x05	; 5
     33e:	fa 95       	dec	r31
     340:	f1 f7       	brne	.-4      	; 0x33e <Data+0x1c>
     342:	00 00       	nop
     344:	aa 9a       	sbi	0x15, 2	; 21
     346:	35 e0       	ldi	r19, 0x05	; 5
     348:	3a 95       	dec	r19
     34a:	f1 f7       	brne	.-4      	; 0x348 <Data+0x26>
     34c:	00 00       	nop
     34e:	aa 98       	cbi	0x15, 2	; 21
     350:	25 bb       	out	0x15, r18	; 21
     352:	25 b3       	in	r18, 0x15	; 21
     354:	e0 e1       	ldi	r30, 0x10	; 16
     356:	8e 9f       	mul	r24, r30
     358:	c0 01       	movw	r24, r0
     35a:	11 24       	eor	r1, r1
     35c:	82 2b       	or	r24, r18
     35e:	85 bb       	out	0x15, r24	; 21
     360:	f5 e0       	ldi	r31, 0x05	; 5
     362:	fa 95       	dec	r31
     364:	f1 f7       	brne	.-4      	; 0x362 <Data+0x40>
     366:	00 00       	nop
     368:	aa 9a       	sbi	0x15, 2	; 21
     36a:	35 e0       	ldi	r19, 0x05	; 5
     36c:	3a 95       	dec	r19
     36e:	f1 f7       	brne	.-4      	; 0x36c <Data+0x4a>
     370:	00 00       	nop
     372:	aa 98       	cbi	0x15, 2	; 21
     374:	08 95       	ret

00000376 <LCD_String>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	ec 01       	movw	r28, r24
     37c:	88 81       	ld	r24, Y
     37e:	88 23       	and	r24, r24
     380:	29 f0       	breq	.+10     	; 0x38c <LCD_String+0x16>
     382:	21 96       	adiw	r28, 0x01	; 1
     384:	ce df       	rcall	.-100    	; 0x322 <Data>
     386:	89 91       	ld	r24, Y+
     388:	81 11       	cpse	r24, r1
     38a:	fc cf       	rjmp	.-8      	; 0x384 <LCD_String+0xe>
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <__vector_18>:
char debug[100]; //************* Debuggig ****************


//  Receive USART Interrupt
ISR(USART0_RX_vect) 
{
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	0b b6       	in	r0, 0x3b	; 59
     39e:	0f 92       	push	r0
     3a0:	2f 93       	push	r18
     3a2:	4f 93       	push	r20
     3a4:	5f 93       	push	r21
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	ef 93       	push	r30
     3ac:	ff 93       	push	r31
    buffer[k] = UDR0;
     3ae:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <k>
     3b2:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <k+0x1>
     3b6:	2c b1       	in	r18, 0x0c	; 12
     3b8:	fc 01       	movw	r30, r24
     3ba:	e2 5d       	subi	r30, 0xD2	; 210
     3bc:	fd 4f       	sbci	r31, 0xFD	; 253
     3be:	20 83       	st	Z, r18
    
    if(buffer[k++] == '\n' ) //  Get data until getting 'Enter key'
     3c0:	ac 01       	movw	r20, r24
     3c2:	4f 5f       	subi	r20, 0xFF	; 255
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	50 93 94 01 	sts	0x0194, r21	; 0x800194 <k+0x1>
     3ca:	40 93 93 01 	sts	0x0193, r20	; 0x800193 <k>
     3ce:	2a 30       	cpi	r18, 0x0A	; 10
     3d0:	59 f4       	brne	.+22     	; 0x3e8 <__vector_18+0x56>
    {
        buffer[k-1] = '\0'; //  put '\0' on the place of '\n'
     3d2:	fc 01       	movw	r30, r24
     3d4:	e2 5d       	subi	r30, 0xD2	; 210
     3d6:	fd 4f       	sbci	r31, 0xFD	; 253
     3d8:	10 82       	st	Z, r1
        k = 0;
     3da:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <k+0x1>
     3de:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <k>
        rx_complete = 1;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <rx_complete>
    }   
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	5f 91       	pop	r21
     3f2:	4f 91       	pop	r20
     3f4:	2f 91       	pop	r18
     3f6:	0f 90       	pop	r0
     3f8:	0b be       	out	0x3b, r0	; 59
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <__vector_7>:
    
sei();}

//External Interrupt for Switch
ISR(INT6_vect)
{cli();
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	f8 94       	cli
    alarm_infi = 0;	//	Alarm OFF  
     410:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <alarm_infi>
sei();}
     414:	78 94       	sei
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_21>:

ISR(ADC_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
   ad_val = (int)ADCL + ((int)ADCH << 8); //  Resistor for storing of result of converting
     432:	24 b1       	in	r18, 0x04	; 4
     434:	85 b1       	in	r24, 0x05	; 5
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	98 2f       	mov	r25, r24
     43a:	88 27       	eor	r24, r24
     43c:	82 0f       	add	r24, r18
     43e:	91 1d       	adc	r25, r1
     440:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <ad_val+0x1>
     444:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <ad_val>
   
   if(ad_val < 50)  //  analog value : 0~2 (SW3)
     448:	82 33       	cpi	r24, 0x32	; 50
     44a:	91 05       	cpc	r25, r1
     44c:	24 f5       	brge	.+72     	; 0x496 <__vector_21+0x76>
   {
       flag3 = 1;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <flag3>
       if(ampm == 0 || ampm == 1)  //  12 -> 24
     454:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <ampm>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	20 f4       	brcc	.+8      	; 0x464 <__vector_21+0x44>
            ampm = 3;
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ampm>
     462:	17 c0       	rjmp	.+46     	; 0x492 <__vector_21+0x72>
       else if(ampm == 3 && ( hour_24 < 13 ))  // 24 -> 12
     464:	83 30       	cpi	r24, 0x03	; 3
     466:	a9 f4       	brne	.+42     	; 0x492 <__vector_21+0x72>
     468:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <hour_24>
     46c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <hour_24+0x1>
     470:	8d 30       	cpi	r24, 0x0D	; 13
     472:	91 05       	cpc	r25, r1
     474:	3c f4       	brge	.+14     	; 0x484 <__vector_21+0x64>
       {
           hour = hour_24;            // AM
     476:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <hour+0x1>
     47a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <hour>
           ampm = 0;
     47e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <ampm>
     482:	07 c0       	rjmp	.+14     	; 0x492 <__vector_21+0x72>
       }
       else if(ampm == 3 && ( hour_24 >= 13))
       {
           hour = hour_24;            // PM
     484:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <hour+0x1>
     488:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <hour>
           ampm = 1;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ampm>
       }
       ADCSRA &= (0b11110111);  //   ADC OFF
     492:	33 98       	cbi	0x06, 3	; 6
     494:	22 c0       	rjmp	.+68     	; 0x4da <__vector_21+0xba>
   }
   else if(ad_val > 60 && ad_val < 120) //  analog value : 88~93 (SW2)
     496:	9c 01       	movw	r18, r24
     498:	2d 53       	subi	r18, 0x3D	; 61
     49a:	31 09       	sbc	r19, r1
     49c:	2b 33       	cpi	r18, 0x3B	; 59
     49e:	31 05       	cpc	r19, r1
     4a0:	98 f4       	brcc	.+38     	; 0x4c8 <__vector_21+0xa8>
   {
       if(alarm_flag == 0)
     4a2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <alarm_flag>
     4a6:	81 11       	cpse	r24, r1
     4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <__vector_21+0x96>
       {
           alarm_flag = 1;      //  Alarm Mode ON!
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <alarm_flag>
		   alarm_open = 1;
     4b0:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <alarm_open>
     4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__vector_21+0xa4>
       }
       else if(alarm_flag == 1 )
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	29 f4       	brne	.+10     	; 0x4c4 <__vector_21+0xa4>
	   {
		   alarm_flag = 0;		//	Alarm Mode OFF!
     4ba:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <alarm_flag>
		   alarm_open = 2;
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <alarm_open>
	   }
              
       ADCSRA &= (0b11110111);  //   ADC OFF
     4c4:	33 98       	cbi	0x06, 3	; 6
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <__vector_21+0xba>
   }
   else if(ad_val > 130 && ad_val < 700)  // analog value : 168~171 (SW1)
     4c8:	83 58       	subi	r24, 0x83	; 131
     4ca:	91 09       	sbc	r25, r1
     4cc:	89 33       	cpi	r24, 0x39	; 57
     4ce:	92 40       	sbci	r25, 0x02	; 2
     4d0:	20 f4       	brcc	.+8      	; 0x4da <__vector_21+0xba>
   {
       state = 1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <state>
       ADCSRA &= (0b11110111);  //   ADC OFF
     4d8:	33 98       	cbi	0x06, 3	; 6
   }
   else    // analog value : 1023 
   {
       return;
   }
}
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	3f 91       	pop	r19
     4e0:	2f 91       	pop	r18
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <Clock>:
}


void Clock(void)
{
    Commend(LINE2);
     4ec:	80 ec       	ldi	r24, 0xC0	; 192
     4ee:	cd de       	rcall	.-614    	; 0x28a <Commend>
    
    if(ampm == 0)
     4f0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <ampm>
     4f4:	81 11       	cpse	r24, r1
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <Clock+0x14>
    {
        LCD_String("AM");
     4f8:	82 e2       	ldi	r24, 0x22	; 34
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	3c df       	rcall	.-392    	; 0x376 <LCD_String>
     4fe:	0b c0       	rjmp	.+22     	; 0x516 <Clock+0x2a>
    }
    else if(ampm == 1)
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	21 f4       	brne	.+8      	; 0x50c <Clock+0x20>
    {
        LCD_String("PM");
     504:	85 e2       	ldi	r24, 0x25	; 37
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	36 df       	rcall	.-404    	; 0x376 <LCD_String>
     50a:	05 c0       	rjmp	.+10     	; 0x516 <Clock+0x2a>
    }
    else if(ampm == 3)
     50c:	83 30       	cpi	r24, 0x03	; 3
        LCD_String("  ");    // when set 24 hour system
     50e:	19 f4       	brne	.+6      	; 0x516 <Clock+0x2a>
     510:	88 e2       	ldi	r24, 0x28	; 40
     512:	91 e0       	ldi	r25, 0x01	; 1

    Commend(0xC3);
     514:	30 df       	rcall	.-416    	; 0x376 <LCD_String>
     516:	83 ec       	ldi	r24, 0xC3	; 195
     518:	b8 de       	rcall	.-656    	; 0x28a <Commend>
    
    if(ampm == 0)
     51a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <ampm>
     51e:	81 11       	cpse	r24, r1
     520:	09 c0       	rjmp	.+18     	; 0x534 <Clock+0x48>
    {
        hour = hour_12;
     522:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour_12>
     526:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <hour_12+0x1>
     52a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <hour+0x1>
     52e:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <hour>
     532:	13 c0       	rjmp	.+38     	; 0x55a <Clock+0x6e>
    }        
    else if(ampm == 1)
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	49 f4       	brne	.+18     	; 0x54a <Clock+0x5e>
    {
        hour = PMhour_12;
     538:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <PMhour_12>
     53c:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <PMhour_12+0x1>
     540:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <hour+0x1>
     544:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <hour>
     548:	08 c0       	rjmp	.+16     	; 0x55a <Clock+0x6e>
    }
    else
        hour = hour_24;
     54a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <hour_24>
     54e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <hour_24+0x1>
     552:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <hour+0x1>
     556:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <hour>
    
    sprintf(temp, "%02d:%02d:%02d" ,hour,min,sec);
     55a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <sec+0x1>
     55e:	8f 93       	push	r24
     560:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sec>
     564:	8f 93       	push	r24
     566:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <min+0x1>
     56a:	8f 93       	push	r24
     56c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <min>
     570:	8f 93       	push	r24
     572:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <hour+0x1>
     576:	8f 93       	push	r24
     578:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <hour>
     57c:	8f 93       	push	r24
     57e:	8b e2       	ldi	r24, 0x2B	; 43
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	81 ec       	ldi	r24, 0xC1	; 193
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
    LCD_String(temp);
     58e:	b7 d4       	rcall	.+2414   	; 0xefe <sprintf>
     590:	81 ec       	ldi	r24, 0xC1	; 193
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	f0 de       	rcall	.-544    	; 0x376 <LCD_String>
}
     596:	8d b7       	in	r24, 0x3d	; 61
     598:	9e b7       	in	r25, 0x3e	; 62
     59a:	0a 96       	adiw	r24, 0x0a	; 10
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	9e bf       	out	0x3e, r25	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	8d bf       	out	0x3d, r24	; 61
     5a6:	08 95       	ret

000005a8 <yr_mon_day>:

void yr_mon_day()
{
    if( day[j] == Day )
     5a8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <j>
     5ac:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <j+0x1>
     5b0:	fc 01       	movw	r30, r24
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	e0 50       	subi	r30, 0x00	; 0
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	40 81       	ld	r20, Z
     5bc:	51 81       	ldd	r21, Z+1	; 0x01
     5be:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <Day>
     5c2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <Day+0x1>
     5c6:	42 17       	cp	r20, r18
     5c8:	53 07       	cpc	r21, r19
     5ca:	a9 f4       	brne	.+42     	; 0x5f6 <yr_mon_day+0x4e>
    {
        Day = 1;
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <Day+0x1>
     5d4:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <Day>
        month++;
     5d8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <month>
     5dc:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <month+0x1>
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <month+0x1>
     5e8:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <month>
        j++;
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <j+0x1>
     5f2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <j>
    }
    
    if( (yr % 4 == 0) || (yr % 100 == 0) || (yr % 400 == 0) )   // for leap year
     5f6:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <yr>
     5fa:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <yr+0x1>
     5fe:	ca 01       	movw	r24, r20
     600:	83 70       	andi	r24, 0x03	; 3
     602:	99 27       	eor	r25, r25
     604:	89 2b       	or	r24, r25
     606:	51 f1       	breq	.+84     	; 0x65c <yr_mon_day+0xb4>
     608:	9a 01       	movw	r18, r20
     60a:	36 95       	lsr	r19
     60c:	27 95       	ror	r18
     60e:	36 95       	lsr	r19
     610:	27 95       	ror	r18
     612:	ab e7       	ldi	r26, 0x7B	; 123
     614:	b4 e1       	ldi	r27, 0x14	; 20
     616:	2b d4       	rcall	.+2134   	; 0xe6e <__umulhisi3>
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	64 e6       	ldi	r22, 0x64	; 100
     61e:	68 9f       	mul	r22, r24
     620:	90 01       	movw	r18, r0
     622:	69 9f       	mul	r22, r25
     624:	30 0d       	add	r19, r0
     626:	11 24       	eor	r1, r1
     628:	42 17       	cp	r20, r18
     62a:	53 07       	cpc	r21, r19
     62c:	b9 f0       	breq	.+46     	; 0x65c <yr_mon_day+0xb4>
     62e:	9a 01       	movw	r18, r20
     630:	32 95       	swap	r19
     632:	22 95       	swap	r18
     634:	2f 70       	andi	r18, 0x0F	; 15
     636:	23 27       	eor	r18, r19
     638:	3f 70       	andi	r19, 0x0F	; 15
     63a:	23 27       	eor	r18, r19
     63c:	ae e3       	ldi	r26, 0x3E	; 62
     63e:	ba e0       	ldi	r27, 0x0A	; 10
     640:	16 d4       	rcall	.+2092   	; 0xe6e <__umulhisi3>
     642:	20 e9       	ldi	r18, 0x90	; 144
     644:	31 e0       	ldi	r19, 0x01	; 1
     646:	bc 01       	movw	r22, r24
     648:	62 9f       	mul	r22, r18
     64a:	c0 01       	movw	r24, r0
     64c:	63 9f       	mul	r22, r19
     64e:	90 0d       	add	r25, r0
     650:	72 9f       	mul	r23, r18
     652:	90 0d       	add	r25, r0
     654:	11 24       	eor	r1, r1
     656:	48 17       	cp	r20, r24
     658:	59 07       	cpc	r21, r25
     65a:	39 f4       	brne	.+14     	; 0x66a <yr_mon_day+0xc2>
    {
        day[1] = 30;
     65c:	8e e1       	ldi	r24, 0x1E	; 30
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     664:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     668:	1e c0       	rjmp	.+60     	; 0x6a6 <yr_mon_day+0xfe>
    }
    
    if(day[1] == 31)
     66a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     66e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     672:	4f 97       	sbiw	r24, 0x1f	; 31
     674:	c1 f4       	brne	.+48     	; 0x6a6 <yr_mon_day+0xfe>
    {
        Day = 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Day+0x1>
     67e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Day>
        month++;
     682:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <month>
     686:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <month+0x1>
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <month+0x1>
     690:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <month>
        j++;
     694:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <j>
     698:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <j+0x1>
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <j+0x1>
     6a2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <j>
    }
    
    if( month == 13 )
     6a6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <month>
     6aa:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <month+0x1>
     6ae:	0d 97       	sbiw	r24, 0x0d	; 13
     6b0:	61 f4       	brne	.+24     	; 0x6ca <yr_mon_day+0x122>
    {
        month = 1;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <month+0x1>
     6ba:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <month>
        yr++;
     6be:	4f 5f       	subi	r20, 0xFF	; 255
     6c0:	5f 4f       	sbci	r21, 0xFF	; 255
     6c2:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <yr+0x1>
     6c6:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <yr>
     6ca:	08 95       	ret

000006cc <Disp_yr_mon_day>:
    }    
}

void Disp_yr_mon_day()
{
    Commend(LINE1);
     6cc:	80 e8       	ldi	r24, 0x80	; 128
     6ce:	dd dd       	rcall	.-1094   	; 0x28a <Commend>
    sprintf(temp2, "%04d-%02d-%02d" ,yr,month,Day);
     6d0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Day+0x1>
     6d4:	8f 93       	push	r24
     6d6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Day>
     6da:	8f 93       	push	r24
     6dc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <month+0x1>
     6e0:	8f 93       	push	r24
     6e2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <month>
     6e6:	8f 93       	push	r24
     6e8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <yr+0x1>
     6ec:	8f 93       	push	r24
     6ee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <yr>
     6f2:	8f 93       	push	r24
     6f4:	8a e3       	ldi	r24, 0x3A	; 58
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	85 ea       	ldi	r24, 0xA5	; 165
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	fc d3       	rcall	.+2040   	; 0xefe <sprintf>
    LCD_String(temp2);
     706:	85 ea       	ldi	r24, 0xA5	; 165
     708:	91 e0       	ldi	r25, 0x01	; 1
    Commend(0x8D);
     70a:	35 de       	rcall	.-918    	; 0x376 <LCD_String>
     70c:	8d e8       	ldi	r24, 0x8D	; 141
     70e:	bd dd       	rcall	.-1158   	; 0x28a <Commend>
    if(alarm_flag == 1)         //  Alarm ON and OFF Display
     710:	8d b7       	in	r24, 0x3d	; 61
     712:	9e b7       	in	r25, 0x3e	; 62
     714:	0a 96       	adiw	r24, 0x0a	; 10
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	9e bf       	out	0x3e, r25	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	8d bf       	out	0x3d, r24	; 61
     720:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <alarm_flag>
     724:	81 30       	cpi	r24, 0x01	; 1
    {
        LCD_String(" ON");
     726:	21 f4       	brne	.+8      	; 0x730 <Disp_yr_mon_day+0x64>
     728:	89 e4       	ldi	r24, 0x49	; 73
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	24 ce       	rjmp	.-952    	; 0x376 <LCD_String>
    }
    else
        LCD_String("OFF");
     72e:	08 95       	ret
     730:	8d e4       	ldi	r24, 0x4D	; 77
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	20 ce       	rjmp	.-960    	; 0x376 <LCD_String>
     736:	08 95       	ret

00000738 <Rx_serial>:
}

void Rx_serial()
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
    if(rx_complete == 1)
     73c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <rx_complete>
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	09 f0       	breq	.+2      	; 0x746 <Rx_serial+0xe>
     744:	e2 c0       	rjmp	.+452    	; 0x90a <Rx_serial+0x1d2>
    {
        if(buffer[0] == '$')
     746:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <buffer>
     74a:	84 32       	cpi	r24, 0x24	; 36
     74c:	09 f0       	breq	.+2      	; 0x750 <Rx_serial+0x18>
     74e:	db c0       	rjmp	.+438    	; 0x906 <Rx_serial+0x1ce>
        {
            if(buffer[1] == 'C')    //  Calender
     750:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <buffer+0x1>
     754:	83 34       	cpi	r24, 0x43	; 67
     756:	99 f5       	brne	.+102    	; 0x7be <Rx_serial+0x86>
            {
                yr = 2000 + (buffer[2]-'0') * 10 + (buffer[3]-'0');
     758:	ee e2       	ldi	r30, 0x2E	; 46
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	82 81       	ldd	r24, Z+2	; 0x02
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	c0 97       	sbiw	r24, 0x30	; 48
     762:	9c 01       	movw	r18, r24
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	82 0f       	add	r24, r18
     776:	93 1f       	adc	r25, r19
     778:	23 81       	ldd	r18, Z+3	; 0x03
     77a:	82 0f       	add	r24, r18
     77c:	91 1d       	adc	r25, r1
     77e:	80 56       	subi	r24, 0x60	; 96
     780:	98 4f       	sbci	r25, 0xF8	; 248
     782:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <yr+0x1>
     786:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <yr>
                month = (atoi(&buffer[4]) - atoi(&buffer[6])) / 100;
     78a:	82 e3       	ldi	r24, 0x32	; 50
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	92 d3       	rcall	.+1828   	; 0xeb4 <atoi>
     790:	ec 01       	movw	r28, r24
     792:	84 e3       	ldi	r24, 0x34	; 52
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	8e d3       	rcall	.+1820   	; 0xeb4 <atoi>
     798:	9e 01       	movw	r18, r28
     79a:	28 1b       	sub	r18, r24
     79c:	39 0b       	sbc	r19, r25
     79e:	c9 01       	movw	r24, r18
     7a0:	64 e6       	ldi	r22, 0x64	; 100
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	51 d3       	rcall	.+1698   	; 0xe48 <__divmodhi4>
     7a6:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <month+0x1>
     7aa:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <month>
                Day = (atoi(&buffer[6]));
     7ae:	84 e3       	ldi	r24, 0x34	; 52
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	80 d3       	rcall	.+1792   	; 0xeb4 <atoi>
     7b4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Day+0x1>
     7b8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Day>
     7bc:	a4 c0       	rjmp	.+328    	; 0x906 <Rx_serial+0x1ce>
     7be:	84 35       	cpi	r24, 0x54	; 84
            }
            else if(buffer[1] == 'T')   //  Time
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <Rx_serial+0x8c>
     7c2:	5a c0       	rjmp	.+180    	; 0x878 <Rx_serial+0x140>
     7c4:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <buffer+0x2>
            {
                if(buffer[2] == 'A')
     7c8:	81 34       	cpi	r24, 0x41	; 65
     7ca:	e9 f4       	brne	.+58     	; 0x806 <Rx_serial+0xce>
     7cc:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <ampm>
                {
                    ampm = 0;
     7d0:	ee e2       	ldi	r30, 0x2E	; 46
                    hour_12 = (buffer[3]-'0') * 10 + (buffer[4]-'0');
     7d2:	f2 e0       	ldi	r31, 0x02	; 2
     7d4:	83 81       	ldd	r24, Z+3	; 0x03
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	c0 97       	sbiw	r24, 0x30	; 48
     7da:	9c 01       	movw	r18, r24
     7dc:	22 0f       	add	r18, r18
     7de:	33 1f       	adc	r19, r19
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	82 0f       	add	r24, r18
     7ee:	93 1f       	adc	r25, r19
     7f0:	24 81       	ldd	r18, Z+4	; 0x04
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	20 53       	subi	r18, 0x30	; 48
     7f6:	31 09       	sbc	r19, r1
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <hour_12+0x1>
     800:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <hour_12>
     804:	1f c0       	rjmp	.+62     	; 0x844 <Rx_serial+0x10c>
     806:	80 35       	cpi	r24, 0x50	; 80
                }                
                else if(buffer[2] == 'P')
     808:	e9 f4       	brne	.+58     	; 0x844 <Rx_serial+0x10c>
     80a:	81 e0       	ldi	r24, 0x01	; 1
                {
                    ampm = 1;
     80c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ampm>
     810:	ee e2       	ldi	r30, 0x2E	; 46
                    PMhour_12 = (buffer[3]-'0') * 10 + (buffer[4]-'0');
     812:	f2 e0       	ldi	r31, 0x02	; 2
     814:	83 81       	ldd	r24, Z+3	; 0x03
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	c0 97       	sbiw	r24, 0x30	; 48
     81a:	9c 01       	movw	r18, r24
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	82 0f       	add	r24, r18
     82e:	93 1f       	adc	r25, r19
     830:	24 81       	ldd	r18, Z+4	; 0x04
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	20 53       	subi	r18, 0x30	; 48
     836:	31 09       	sbc	r19, r1
     838:	82 0f       	add	r24, r18
     83a:	93 1f       	adc	r25, r19
     83c:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <PMhour_12+0x1>
     840:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <PMhour_12>
                }                    
                min = (atoi(&buffer[5]) - atoi(&buffer[7])) / 100;
     844:	83 e3       	ldi	r24, 0x33	; 51
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	35 d3       	rcall	.+1642   	; 0xeb4 <atoi>
     84a:	ec 01       	movw	r28, r24
     84c:	85 e3       	ldi	r24, 0x35	; 53
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	31 d3       	rcall	.+1634   	; 0xeb4 <atoi>
     852:	9e 01       	movw	r18, r28
     854:	28 1b       	sub	r18, r24
     856:	39 0b       	sbc	r19, r25
     858:	c9 01       	movw	r24, r18
     85a:	64 e6       	ldi	r22, 0x64	; 100
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	f4 d2       	rcall	.+1512   	; 0xe48 <__divmodhi4>
     860:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <min+0x1>
     864:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <min>
                sec = (atoi(&buffer[7])); 
     868:	85 e3       	ldi	r24, 0x35	; 53
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	23 d3       	rcall	.+1606   	; 0xeb4 <atoi>
     86e:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <sec+0x1>
     872:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <sec>
     876:	47 c0       	rjmp	.+142    	; 0x906 <Rx_serial+0x1ce>
     878:	81 34       	cpi	r24, 0x41	; 65
            }
            else if(buffer[1] == 'A')   //  Alarm
     87a:	09 f0       	breq	.+2      	; 0x87e <Rx_serial+0x146>
     87c:	44 c0       	rjmp	.+136    	; 0x906 <Rx_serial+0x1ce>
     87e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <buffer+0x2>
            {
                if(buffer[2] == 'A')
     882:	81 34       	cpi	r24, 0x41	; 65
     884:	29 f4       	brne	.+10     	; 0x890 <Rx_serial+0x158>
     886:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <alarm_ampm+0x1>
                {
                    alarm_ampm = 0;
     88a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <alarm_ampm>
     88e:	08 c0       	rjmp	.+16     	; 0x8a0 <Rx_serial+0x168>
     890:	80 35       	cpi	r24, 0x50	; 80
                }
                else if(buffer[2] == 'P')
     892:	31 f4       	brne	.+12     	; 0x8a0 <Rx_serial+0x168>
     894:	81 e0       	ldi	r24, 0x01	; 1
                {
                    alarm_ampm = 1;
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <alarm_ampm+0x1>
     89c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <alarm_ampm>
     8a0:	ee e2       	ldi	r30, 0x2E	; 46
                }
                alarm_hr = (buffer[3]-'0') * 10 + (buffer[4]-'0');
     8a2:	f2 e0       	ldi	r31, 0x02	; 2
     8a4:	83 81       	ldd	r24, Z+3	; 0x03
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	c0 97       	sbiw	r24, 0x30	; 48
     8aa:	9c 01       	movw	r18, r24
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	82 0f       	add	r24, r18
     8be:	93 1f       	adc	r25, r19
     8c0:	24 81       	ldd	r18, Z+4	; 0x04
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	20 53       	subi	r18, 0x30	; 48
     8c6:	31 09       	sbc	r19, r1
     8c8:	82 0f       	add	r24, r18
     8ca:	93 1f       	adc	r25, r19
     8cc:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <alarm_hr+0x1>
     8d0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <alarm_hr>
                alarm_min = (atoi(&buffer[5]) - atoi(&buffer[7])) / 100;
     8d4:	83 e3       	ldi	r24, 0x33	; 51
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	ed d2       	rcall	.+1498   	; 0xeb4 <atoi>
     8da:	ec 01       	movw	r28, r24
     8dc:	85 e3       	ldi	r24, 0x35	; 53
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	e9 d2       	rcall	.+1490   	; 0xeb4 <atoi>
     8e2:	9e 01       	movw	r18, r28
     8e4:	28 1b       	sub	r18, r24
     8e6:	39 0b       	sbc	r19, r25
     8e8:	c9 01       	movw	r24, r18
     8ea:	64 e6       	ldi	r22, 0x64	; 100
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	ac d2       	rcall	.+1368   	; 0xe48 <__divmodhi4>
     8f0:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <alarm_min+0x1>
     8f4:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <alarm_min>
                alarm_sec = (atoi(&buffer[7])); 
     8f8:	85 e3       	ldi	r24, 0x35	; 53
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	db d2       	rcall	.+1462   	; 0xeb4 <atoi>
     8fe:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <alarm_sec+0x1>
     902:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <alarm_sec>
     906:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <rx_complete>
            }
        }
        rx_complete = 0;
     90a:	df 91       	pop	r29
    }       
}
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <alarm_disp>:
     910:	80 e8       	ldi	r24, 0x80	; 128

void alarm_disp()
{
    Commend(LINE1);
     912:	bb dc       	rcall	.-1674   	; 0x28a <Commend>
    LCD_String("Alarm Mode");
     914:	81 e5       	ldi	r24, 0x51	; 81
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	2e dd       	rcall	.-1444   	; 0x376 <LCD_String>
    
    Commend(LINE2);
     91a:	80 ec       	ldi	r24, 0xC0	; 192
     91c:	b6 dc       	rcall	.-1684   	; 0x28a <Commend>
     91e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <alarm_ampm>
    if(alarm_ampm == 0)
     922:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <alarm_ampm+0x1>
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	21 f4       	brne	.+8      	; 0x932 <alarm_disp+0x22>
    {
        LCD_String("AM");
     92a:	82 e2       	ldi	r24, 0x22	; 34
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	23 dd       	rcall	.-1466   	; 0x376 <LCD_String>
     930:	05 c0       	rjmp	.+10     	; 0x93c <alarm_disp+0x2c>
     932:	01 97       	sbiw	r24, 0x01	; 1
    }
    else if(alarm_ampm == 1)
     934:	19 f4       	brne	.+6      	; 0x93c <alarm_disp+0x2c>
    {
        LCD_String("PM");
     936:	85 e2       	ldi	r24, 0x25	; 37
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	1d dd       	rcall	.-1478   	; 0x376 <LCD_String>
    }
    Commend(0xC3);
     93c:	83 ec       	ldi	r24, 0xC3	; 195
     93e:	a5 dc       	rcall	.-1718   	; 0x28a <Commend>
     940:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <alarm_sec+0x1>
    sprintf(al_temp, "%02d:%02d:%02d" ,alarm_hr,alarm_min,alarm_sec);
     944:	8f 93       	push	r24
     946:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <alarm_sec>
     94a:	8f 93       	push	r24
     94c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <alarm_min+0x1>
     950:	8f 93       	push	r24
     952:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <alarm_min>
     956:	8f 93       	push	r24
     958:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <alarm_hr+0x1>
     95c:	8f 93       	push	r24
     95e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <alarm_hr>
     962:	8f 93       	push	r24
     964:	8b e2       	ldi	r24, 0x2B	; 43
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	81 eb       	ldi	r24, 0xB1	; 177
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	c4 d2       	rcall	.+1416   	; 0xefe <sprintf>
    LCD_String(al_temp);
     976:	81 eb       	ldi	r24, 0xB1	; 177
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	fd dc       	rcall	.-1542   	; 0x376 <LCD_String>
     97c:	8d b7       	in	r24, 0x3d	; 61
}
     97e:	9e b7       	in	r25, 0x3e	; 62
     980:	0a 96       	adiw	r24, 0x0a	; 10
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	9e bf       	out	0x3e, r25	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	8d bf       	out	0x3d, r24	; 61
     98c:	08 95       	ret

0000098e <current_display>:
     98e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <state>


void current_display()
{
    if(state == 0)                  // Routine Display.
     992:	81 11       	cpse	r24, r1
     994:	03 c0       	rjmp	.+6      	; 0x99c <current_display+0xe>
    {
        Disp_yr_mon_day();
     996:	9a de       	rcall	.-716    	; 0x6cc <Disp_yr_mon_day>
        Clock();
     998:	a9 cd       	rjmp	.-1198   	; 0x4ec <Clock>
     99a:	08 95       	ret
     99c:	81 30       	cpi	r24, 0x01	; 1
    }
    else if(state == 1)             //  Show current alarm Display for a second.
     99e:	71 f4       	brne	.+28     	; 0x9bc <current_display+0x2e>
    {
        alarm_disp();
     9a0:	b7 df       	rcall	.-146    	; 0x910 <alarm_disp>
     9a2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <cnt2>
        
        if(cnt2 == 2)
     9a6:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <cnt2+0x1>
     9aa:	02 97       	sbiw	r24, 0x02	; 2
     9ac:	39 f4       	brne	.+14     	; 0x9bc <current_display+0x2e>
     9ae:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <cnt2+0x1>
        {
            cnt2 = 0;
     9b2:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <cnt2>
     9b6:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <state>
            state = 0;
     9ba:	33 9a       	sbi	0x06, 3	; 6
            ADCSRA |= 0b00001000;   //  ADC ON!*/
     9bc:	08 95       	ret

000009be <servo_motor_move>:
     9be:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <motor_on>
}

void servo_motor_move()
{
    static int just_one=0;
	if(motor_on == 0 && just_one)		//	after 1 second,
     9c2:	81 11       	cpse	r24, r1
     9c4:	14 c0       	rjmp	.+40     	; 0x9ee <servo_motor_move+0x30>
     9c6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
     9ca:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <__data_end+0x1>
     9ce:	89 2b       	or	r24, r25
     9d0:	29 f1       	breq	.+74     	; 0xa1c <servo_motor_move+0x5e>
	{
		OCR3A = 1500;		//	move to 0 degree
     9d2:	8c ed       	ldi	r24, 0xDC	; 220
     9d4:	95 e0       	ldi	r25, 0x05	; 5
     9d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
        sound_flag = 1;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <sound_flag>
        just_one=0;
     9e4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <__data_end+0x1>
     9e8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
     9ec:	08 95       	ret
	}
	else if(motor_on == 1 && !just_one)
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	a9 f4       	brne	.+42     	; 0xa1c <servo_motor_move+0x5e>
     9f2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
     9f6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <__data_end+0x1>
     9fa:	89 2b       	or	r24, r25
     9fc:	79 f4       	brne	.+30     	; 0xa1c <servo_motor_move+0x5e>
	{
		OCR3A = 4999;       //  move to 180 degree
     9fe:	87 e8       	ldi	r24, 0x87	; 135
     a00:	93 e1       	ldi	r25, 0x13	; 19
     a02:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a06:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
        sound_flag = 1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <sound_flag>
        just_one=1;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <__data_end+0x1>
     a18:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
     a1c:	08 95       	ret

00000a1e <alarm_mode>:
}

void alarm_mode()
{
	
	if((alarm_ampm == ampm && alarm_hr == hour && alarm_min == min && sec == 0) && (alarm_flag == 1))
     a1e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <ampm>
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <alarm_ampm>
     a28:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <alarm_ampm+0x1>
     a2c:	82 17       	cp	r24, r18
     a2e:	93 07       	cpc	r25, r19
     a30:	21 f5       	brne	.+72     	; 0xa7a <alarm_mode+0x5c>
     a32:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <alarm_hr>
     a36:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <alarm_hr+0x1>
     a3a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <hour>
     a3e:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <hour+0x1>
     a42:	28 17       	cp	r18, r24
     a44:	39 07       	cpc	r19, r25
     a46:	c9 f4       	brne	.+50     	; 0xa7a <alarm_mode+0x5c>
     a48:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <alarm_min>
     a4c:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <alarm_min+0x1>
     a50:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <min>
     a54:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <min+0x1>
     a58:	28 17       	cp	r18, r24
     a5a:	39 07       	cpc	r19, r25
     a5c:	71 f4       	brne	.+28     	; 0xa7a <alarm_mode+0x5c>
     a5e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sec>
     a62:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <sec+0x1>
     a66:	89 2b       	or	r24, r25
     a68:	41 f4       	brne	.+16     	; 0xa7a <alarm_mode+0x5c>
     a6a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <alarm_flag>
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	21 f4       	brne	.+8      	; 0xa7a <alarm_mode+0x5c>
	{
		alarm_infi = 1;
     a72:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <alarm_infi>
		sound_flag = 1;
     a76:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <sound_flag>
     a7a:	08 95       	ret

00000a7c <OnTime_alarm>:
	}
}

void OnTime_alarm()
{
	if(alarm_flag == 1)
     a7c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <alarm_flag>
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	21 f5       	brne	.+72     	; 0xacc <OnTime_alarm+0x50>
	{
        if(min == 0 && hour == 1 && (sec > 0 && sec < 3))
     a84:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <min>
     a88:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <min+0x1>
     a8c:	89 2b       	or	r24, r25
     a8e:	f1 f4       	brne	.+60     	; 0xacc <OnTime_alarm+0x50>
     a90:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <hour>
     a94:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <hour+0x1>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	91 05       	cpc	r25, r1
     a9c:	81 f4       	brne	.+32     	; 0xabe <OnTime_alarm+0x42>
     a9e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sec>
     aa2:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <sec+0x1>
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	02 97       	sbiw	r24, 0x02	; 2
     aaa:	80 f4       	brcc	.+32     	; 0xacc <OnTime_alarm+0x50>
        {
            servo_motor_move();
     aac:	88 cf       	rjmp	.-240    	; 0x9be <servo_motor_move>
     aae:	08 95       	ret
        }
        else if(min == 0 && hour != 1 && (sec > 0 && sec <= hour*2) )
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	82 17       	cp	r24, r18
     ab6:	93 07       	cpc	r25, r19
        {
            servo_motor_move();      
     ab8:	4c f0       	brlt	.+18     	; 0xacc <OnTime_alarm+0x50>
     aba:	81 cf       	rjmp	.-254    	; 0x9be <servo_motor_move>
        }
	}
}
     abc:	08 95       	ret
	{
        if(min == 0 && hour == 1 && (sec > 0 && sec < 3))
        {
            servo_motor_move();
        }
        else if(min == 0 && hour != 1 && (sec > 0 && sec <= hour*2) )
     abe:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <sec>
     ac2:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <sec+0x1>
     ac6:	12 16       	cp	r1, r18
     ac8:	13 06       	cpc	r1, r19
     aca:	94 f3       	brlt	.-28     	; 0xab0 <OnTime_alarm+0x34>
     acc:	08 95       	ret

00000ace <SendCommand>:
        }
	}
}

void SendCommand(unsigned char cmd)
{
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	18 2f       	mov	r17, r24
    unsigned int checksum = 0;
    USART1_putch(0x7E);
     ad6:	8e e7       	ldi	r24, 0x7E	; 126
     ad8:	d0 db       	rcall	.-2144   	; 0x27a <USART1_putch>
    USART1_putch(0xFF);
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	ce db       	rcall	.-2148   	; 0x27a <USART1_putch>
    USART1_putch(0x06);
     ade:	86 e0       	ldi	r24, 0x06	; 6
     ae0:	cc db       	rcall	.-2152   	; 0x27a <USART1_putch>
    USART1_putch(cmd);
     ae2:	81 2f       	mov	r24, r17
     ae4:	ca db       	rcall	.-2156   	; 0x27a <USART1_putch>
    USART1_putch(0x00);
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	c8 db       	rcall	.-2160   	; 0x27a <USART1_putch>
     aea:	80 e0       	ldi	r24, 0x00	; 0
    USART1_putch(0x00);
     aec:	c6 db       	rcall	.-2164   	; 0x27a <USART1_putch>
     aee:	19 30       	cpi	r17, 0x09	; 9

    if(cmd != CMD_TF){
     af0:	39 f0       	breq	.+14     	; 0xb00 <SendCommand+0x32>
     af2:	80 e0       	ldi	r24, 0x00	; 0
        USART1_putch(0x00);
     af4:	c2 db       	rcall	.-2172   	; 0x27a <USART1_putch>
     af6:	cb ef       	ldi	r28, 0xFB	; 251
        checksum = 0 - (0xFF + 0x06 + cmd);
     af8:	de ef       	ldi	r29, 0xFE	; 254
     afa:	c1 1b       	sub	r28, r17
     afc:	d1 09       	sbc	r29, r1
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <SendCommand+0x3a>
    }
    else{
        USART1_putch(0x02);
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	bb db       	rcall	.-2186   	; 0x27a <USART1_putch>
        checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
     b04:	c0 ef       	ldi	r28, 0xF0	; 240
     b06:	de ef       	ldi	r29, 0xFE	; 254
    }
    
    USART1_putch((char)(checksum >> 8));
     b08:	8d 2f       	mov	r24, r29
     b0a:	b7 db       	rcall	.-2194   	; 0x27a <USART1_putch>
     b0c:	8c 2f       	mov	r24, r28
    USART1_putch(checksum & 0xFF);
     b0e:	b5 db       	rcall	.-2198   	; 0x27a <USART1_putch>
     b10:	8f ee       	ldi	r24, 0xEF	; 239
     b12:	b3 db       	rcall	.-2202   	; 0x27a <USART1_putch>
    USART1_putch(0xEF);
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
}
     b1a:	08 95       	ret

00000b1c <__vector_12>:
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
    }   
}

// 1000ms(=1s)
ISR(TIMER1_COMPA_vect)
{cli();
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	0b b6       	in	r0, 0x3b	; 59
     b28:	0f 92       	push	r0
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	f8 94       	cli
	
	if(state == 1 || alarm_open == 1  )      //  State of Alarm mode showing on Display
     b44:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <state>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	21 f0       	breq	.+8      	; 0xb54 <__vector_12+0x38>
     b4c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <alarm_open>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	99 f4       	brne	.+38     	; 0xb7a <__vector_12+0x5e>
    {										 //  Alarm Mode ON and OFF
		if(++cnt2 == 3) //  holding
     b54:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <cnt2>
     b58:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <cnt2+0x1>
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <cnt2+0x1>
     b62:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <cnt2>
     b66:	03 97       	sbiw	r24, 0x03	; 3
     b68:	e1 f4       	brne	.+56     	; 0xba2 <__vector_12+0x86>
		{
			alarm_open = 0;
     b6a:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <alarm_open>
			cnt2 = 0;
     b6e:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <cnt2+0x1>
     b72:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <cnt2>
			ADCSRA |= 0b00001000;
     b76:	33 9a       	sbi	0x06, 3	; 6
     b78:	14 c0       	rjmp	.+40     	; 0xba2 <__vector_12+0x86>
		}
    }
	else if(alarm_open == 2 )
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	91 f4       	brne	.+36     	; 0xba2 <__vector_12+0x86>
	{
		if(++cnt2 == 3) //  holding
     b7e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <cnt2>
     b82:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <cnt2+0x1>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <cnt2+0x1>
     b8c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <cnt2>
     b90:	03 97       	sbiw	r24, 0x03	; 3
     b92:	39 f4       	brne	.+14     	; 0xba2 <__vector_12+0x86>
		{
			alarm_open = 0;
     b94:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <alarm_open>
			cnt2 = 0;
     b98:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <cnt2+0x1>
     b9c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <cnt2>
			ADCSRA |= 0b00001000;
     ba0:	33 9a       	sbi	0x06, 3	; 6
		}
	}


    if(flag3 == 1)      //  AM and PM shift flag
     ba2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag3>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	a1 f4       	brne	.+40     	; 0xbd2 <__vector_12+0xb6>
    { 
        if(++cnt == 2)  //  Prevent of Chattering
     baa:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <cnt>
     bae:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <cnt+0x1>
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	91 05       	cpc	r25, r1
     bb8:	29 f0       	breq	.+10     	; 0xbc4 <__vector_12+0xa8>
     bba:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <cnt+0x1>
     bbe:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <cnt>
     bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <__vector_12+0xb6>
        {
            cnt = 0;
     bc4:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <cnt+0x1>
     bc8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <cnt>
            flag3 = 0;
     bcc:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <flag3>
            ADCSRA |= 0b00001000;   //  ADC ON!
     bd0:	33 9a       	sbi	0x06, 3	; 6
        }        
    }

    
    if(++sec==60)
     bd2:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sec>
     bd6:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <sec+0x1>
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	8c 33       	cpi	r24, 0x3C	; 60
     bde:	91 05       	cpc	r25, r1
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_12+0xd0>
     be2:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <sec+0x1>
     be6:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <sec>
     bea:	57 c0       	rjmp	.+174    	; 0xc9a <__vector_12+0x17e>
    {
        sec=0;
     bec:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <sec+0x1>
     bf0:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <sec>
        if(++min==60)
     bf4:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <min>
     bf8:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <min+0x1>
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	8c 33       	cpi	r24, 0x3C	; 60
     c00:	91 05       	cpc	r25, r1
     c02:	29 f0       	breq	.+10     	; 0xc0e <__vector_12+0xf2>
     c04:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <min+0x1>
     c08:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <min>
     c0c:	46 c0       	rjmp	.+140    	; 0xc9a <__vector_12+0x17e>
        {
            min=0;
     c0e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <min+0x1>
     c12:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <min>
            if(++hour_12 == 13 )      // (AM)Over at 12:59:59
     c16:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour_12>
     c1a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <hour_12+0x1>
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	8d 30       	cpi	r24, 0x0D	; 13
     c22:	91 05       	cpc	r25, r1
     c24:	29 f0       	breq	.+10     	; 0xc30 <__vector_12+0x114>
     c26:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <hour_12+0x1>
     c2a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <hour_12>
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <__vector_12+0x124>
            {
                hour_12 = 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <hour_12+0x1>
     c38:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <hour_12>
                ampm = 1;
     c3c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ampm>
            }  
              
            if(++PMhour_12 == 12 )    // (PM)Over at 11:59:59
     c40:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <PMhour_12>
     c44:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <PMhour_12+0x1>
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	8c 30       	cpi	r24, 0x0C	; 12
     c4c:	91 05       	cpc	r25, r1
     c4e:	29 f0       	breq	.+10     	; 0xc5a <__vector_12+0x13e>
     c50:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <PMhour_12+0x1>
     c54:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <PMhour_12>
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <__vector_12+0x14a>
            {
                PMhour_12 = 0;
     c5a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <PMhour_12+0x1>
     c5e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <PMhour_12>
                ampm = 0;
     c62:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <ampm>
            }     

            if(++hour_24 == 24)
     c66:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <hour_24>
     c6a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <hour_24+0x1>
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	88 31       	cpi	r24, 0x18	; 24
     c72:	91 05       	cpc	r25, r1
     c74:	29 f0       	breq	.+10     	; 0xc80 <__vector_12+0x164>
     c76:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <hour_24+0x1>
     c7a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <hour_24>
     c7e:	0d c0       	rjmp	.+26     	; 0xc9a <__vector_12+0x17e>
            {
                hour_24 = 0;
     c80:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <hour_24+0x1>
     c84:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <hour_24>
                ++Day;
     c88:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Day>
     c8c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Day+0x1>
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Day+0x1>
     c96:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Day>
            }
        }
    }
    if(alarm_flag == 1)	//	if alarm is On, Motor is Toggle
     c9a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <alarm_flag>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__vector_12+0x188>
     ca2:	40 c0       	rjmp	.+128    	; 0xd24 <__vector_12+0x208>
    {
        if(motor_on == 1 && (sec%2==1))
     ca4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <motor_on>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	11 f5       	brne	.+68     	; 0xcf0 <__vector_12+0x1d4>
     cac:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sec>
     cb0:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <sec+0x1>
     cb4:	81 70       	andi	r24, 0x01	; 1
     cb6:	90 78       	andi	r25, 0x80	; 128
     cb8:	99 23       	and	r25, r25
     cba:	24 f4       	brge	.+8      	; 0xcc4 <__vector_12+0x1a8>
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	8e 6f       	ori	r24, 0xFE	; 254
     cc0:	9f 6f       	ori	r25, 0xFF	; 255
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	71 f5       	brne	.+92     	; 0xd24 <__vector_12+0x208>
        {
            if(++cnt3 == 1)
     cc8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <cnt3>
     ccc:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <cnt3+0x1>
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	29 f0       	breq	.+10     	; 0xce2 <__vector_12+0x1c6>
     cd8:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <cnt3+0x1>
     cdc:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <cnt3>
     ce0:	21 c0       	rjmp	.+66     	; 0xd24 <__vector_12+0x208>
            {
                cnt3 = 0;
     ce2:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <cnt3+0x1>
     ce6:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <cnt3>
                motor_on = 0;
     cea:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <motor_on>
     cee:	1a c0       	rjmp	.+52     	; 0xd24 <__vector_12+0x208>
            }
        }
        else if(motor_on == 0 && (sec%2==0))
     cf0:	81 11       	cpse	r24, r1
     cf2:	18 c0       	rjmp	.+48     	; 0xd24 <__vector_12+0x208>
     cf4:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sec>
     cf8:	80 fd       	sbrc	r24, 0
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <__vector_12+0x208>
        {
            if(++cnt3 == 1)
     cfc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <cnt3>
     d00:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <cnt3+0x1>
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	29 f0       	breq	.+10     	; 0xd16 <__vector_12+0x1fa>
     d0c:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <cnt3+0x1>
     d10:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <cnt3>
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <__vector_12+0x208>
            {
                cnt3 = 0;
     d16:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <cnt3+0x1>
     d1a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <cnt3>
                motor_on = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <motor_on>
            }
        }
    }

    if(sound_flag == 1)
     d24:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <sound_flag>
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	21 f4       	brne	.+8      	; 0xd34 <__vector_12+0x218>
    {
        SendCommand(CMD_PLAY);
     d2c:	8d e0       	ldi	r24, 0x0D	; 13
     d2e:	cf de       	rcall	.-610    	; 0xace <SendCommand>
        sound_flag = 0;
     d30:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <sound_flag>
    }
    
sei();}
     d34:	78 94       	sei
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0b be       	out	0x3b, r0	; 59
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <main>:
*/

int main(void)
{
   // Port set 
   DDRC = 0xFF;   //   set output for LCD
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	84 bb       	out	0x14, r24	; 20

   
   // Using Analog Port by 'PE6' as a switch

   // Set External Interrupt Resistor for 'Switch'
   DDRE = (0 << 6);     // Set input SW
     d60:	12 b8       	out	0x02, r1	; 2
   PORTE = (1 << 6) ;    // Set input-Pull-up, PWM port
     d62:	c0 e4       	ldi	r28, 0x40	; 64
     d64:	c3 b9       	out	0x03, r28	; 3
   EICRB = (1 << ISC61);// Set at Falling-edge
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	8a bf       	out	0x3a, r24	; 58
   EIMSK |= (1 << INT6); // Enable bit 6 interrupt 
     d6a:	89 b7       	in	r24, 0x39	; 57
     d6c:	80 64       	ori	r24, 0x40	; 64
     d6e:	89 bf       	out	0x39, r24	; 57
   
   // Timer/Count 1 Resistor set (Comparative match, 'CTC mode')
   TCCR1A = 0x00;   //   OC1A output clear
     d70:	1f bc       	out	0x2f, r1	; 47
   TCCR1B = 0x0D;   //   1024 prescaler, CTC mode                                   **디버깅후 0x0D로 수정하기**
     d72:	8d e0       	ldi	r24, 0x0D	; 13
     d74:	8e bd       	out	0x2e, r24	; 46
   OCR1A = 15624;   //   (1/16)us * 1024 * (1+15624) = 1000000us = 1000ms = 1s      **디버깅후 15624로 수정하기**
     d76:	88 e0       	ldi	r24, 0x08	; 8
     d78:	9d e3       	ldi	r25, 0x3D	; 61
     d7a:	9b bd       	out	0x2b, r25	; 43
     d7c:	8a bd       	out	0x2a, r24	; 42
   TIMSK |= ( 1 << OCIE1A);   //   Timer/Counter Output Comparative A match ENable
     d7e:	87 b7       	in	r24, 0x37	; 55
     d80:	80 61       	ori	r24, 0x10	; 16
     d82:	87 bf       	out	0x37, r24	; 55
   
   // Timer/Count 3 Resistor set for fast 'PWM Mode'
   // OCR1A : 20ms, OCR1B : adjustable for PWM signal
   DDRE |= 0x08;    //   set PWM port 'PE4'
     d84:	13 9a       	sbi	0x02, 3	; 2
   TCCR3A = 0x82;   //   3A output Clear, Fast PWM
     d86:	82 e8       	ldi	r24, 0x82	; 130
     d88:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
   TCCR3B = 0x1A;   //  Set Prescaler 8
     d8c:	8a e1       	ldi	r24, 0x1A	; 26
     d8e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
   OCR3A = 4999;     //  initial "0 degree" of Motor     0 ~ 180 degree (range 999 ~ 4999)
     d92:	87 e8       	ldi	r24, 0x87	; 135
     d94:	93 e1       	ldi	r25, 0x13	; 19
     d96:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d9a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
   ICR3 = 39999;    // (1/16)us * 8 * (1+39999) = 20000us = 20ms
     d9e:	8f e3       	ldi	r24, 0x3F	; 63
     da0:	9c e9       	ldi	r25, 0x9C	; 156
     da2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     da6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
   
   // Set USART0 initializing
   USART0_init(9600);
     daa:	60 e8       	ldi	r22, 0x80	; 128
     dac:	75 e2       	ldi	r23, 0x25	; 37
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	8b d9       	rcall	.-3306   	; 0xca <USART0_init>
   USART1_init(9600);
     db4:	60 e8       	ldi	r22, 0x80	; 128
     db6:	75 e2       	ldi	r23, 0x25	; 37
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	e4 d9       	rcall	.-3128   	; 0x186 <USART1_init>
                                                    
   // A/D Converter Resistor set
   ADMUX = 0x40 ;   //  Use ADC0 Port
     dbe:	c7 b9       	out	0x07, r28	; 7
   ADCSRA = 0xEF ;          //  128 prescaler
     dc0:	8f ee       	ldi	r24, 0xEF	; 239
   
   // Set LCD Default
   LCD_init();	
     dc2:	86 b9       	out	0x06, r24	; 6
   LCD_String("2018-07-14");
     dc4:	8b da       	rcall	.-2794   	; 0x2dc <LCD_init>
     dc6:	8c e5       	ldi	r24, 0x5C	; 92
     dc8:	91 e0       	ldi	r25, 0x01	; 1
   Commend(LINE2);
     dca:	d5 da       	rcall	.-2646   	; 0x376 <LCD_String>
     dcc:	80 ec       	ldi	r24, 0xC0	; 192
   LCD_String("AM 12:00:00");
     dce:	5d da       	rcall	.-2886   	; 0x28a <Commend>
     dd0:	87 e6       	ldi	r24, 0x67	; 103
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	d0 da       	rcall	.-2656   	; 0x376 <LCD_String>
     dd6:	2f ef       	ldi	r18, 0xFF	; 255
     dd8:	83 ec       	ldi	r24, 0xC3	; 195
     dda:	99 e0       	ldi	r25, 0x09	; 9
     ddc:	21 50       	subi	r18, 0x01	; 1
     dde:	80 40       	sbci	r24, 0x00	; 0
     de0:	90 40       	sbci	r25, 0x00	; 0
     de2:	e1 f7       	brne	.-8      	; 0xddc <main+0x80>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <main+0x8a>
   
   _delay_ms(200);
   SendCommand(CMD_TF);         //  Set MP3 Player
     de6:	00 00       	nop
     de8:	89 e0       	ldi	r24, 0x09	; 9
     dea:	71 de       	rcall	.-798    	; 0xace <SendCommand>

   
   sei();   //  Enable Interrupt resistor
     dec:	78 94       	sei

   while (1) 
   {
            // 디버깅용 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        
       sprintf(debug,"%d , %d, ", sec, min ); //  ***********************debugging
     dee:	03 e7       	ldi	r16, 0x73	; 115
     df0:	11 e0       	ldi	r17, 0x01	; 1
     df2:	ca ec       	ldi	r28, 0xCA	; 202
     df4:	d1 e0       	ldi	r29, 0x01	; 1
     df6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <min+0x1>
     dfa:	8f 93       	push	r24
     dfc:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <min>
     e00:	8f 93       	push	r24
     e02:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <sec+0x1>
     e06:	8f 93       	push	r24
     e08:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sec>
     e0c:	8f 93       	push	r24
     e0e:	1f 93       	push	r17
     e10:	0f 93       	push	r16
     e12:	df 93       	push	r29
       USART0_puts(debug);
     e14:	cf 93       	push	r28
     e16:	73 d0       	rcall	.+230    	; 0xefe <sprintf>
       USART0_puts("\n\r");
     e18:	ce 01       	movw	r24, r28
     e1a:	21 da       	rcall	.-3006   	; 0x25e <USART0_puts>
     e1c:	8d e7       	ldi	r24, 0x7D	; 125
     e1e:	91 e0       	ldi	r25, 0x01	; 1
        
            // 디버깅용 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        Rx_serial();
     e20:	1e da       	rcall	.-3012   	; 0x25e <USART0_puts>
     e22:	8a dc       	rcall	.-1772   	; 0x738 <Rx_serial>
		yr_mon_day();
     e24:	c1 db       	rcall	.-2174   	; 0x5a8 <yr_mon_day>
     e26:	b3 dd       	rcall	.-1178   	; 0x98e <current_display>
		current_display();
     e28:	fa dd       	rcall	.-1036   	; 0xa1e <alarm_mode>
     e2a:	8d b7       	in	r24, 0x3d	; 61
		alarm_mode();
     e2c:	9e b7       	in	r25, 0x3e	; 62
        
	   if(alarm_infi == 1)
     e2e:	08 96       	adiw	r24, 0x08	; 8
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	9e bf       	out	0x3e, r25	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	8d bf       	out	0x3d, r24	; 61
     e3a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <alarm_infi>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	09 f4       	brne	.+2      	; 0xe44 <main+0xe8>
     e42:	bd dd       	rcall	.-1158   	; 0x9be <servo_motor_move>
     e44:	1b de       	rcall	.-970    	; 0xa7c <OnTime_alarm>
			servo_motor_move();
     e46:	d7 cf       	rjmp	.-82     	; 0xdf6 <main+0x9a>

00000e48 <__divmodhi4>:
     e48:	97 fb       	bst	r25, 7
            
		OnTime_alarm();
     e4a:	07 2e       	mov	r0, r23
     e4c:	16 f4       	brtc	.+4      	; 0xe52 <__divmodhi4+0xa>
   }
     e4e:	00 94       	com	r0
     e50:	06 d0       	rcall	.+12     	; 0xe5e <__divmodhi4_neg1>
     e52:	77 fd       	sbrc	r23, 7
     e54:	08 d0       	rcall	.+16     	; 0xe66 <__divmodhi4_neg2>
     e56:	1a d0       	rcall	.+52     	; 0xe8c <__udivmodhi4>
     e58:	07 fc       	sbrc	r0, 7
     e5a:	05 d0       	rcall	.+10     	; 0xe66 <__divmodhi4_neg2>
     e5c:	3e f4       	brtc	.+14     	; 0xe6c <__divmodhi4_exit>

00000e5e <__divmodhi4_neg1>:
     e5e:	90 95       	com	r25
     e60:	81 95       	neg	r24
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	08 95       	ret

00000e66 <__divmodhi4_neg2>:
     e66:	70 95       	com	r23
     e68:	61 95       	neg	r22
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e6c <__divmodhi4_exit>:
     e6c:	08 95       	ret

00000e6e <__umulhisi3>:
     e6e:	a2 9f       	mul	r26, r18
     e70:	b0 01       	movw	r22, r0
     e72:	b3 9f       	mul	r27, r19
     e74:	c0 01       	movw	r24, r0
     e76:	a3 9f       	mul	r26, r19
     e78:	70 0d       	add	r23, r0
     e7a:	81 1d       	adc	r24, r1
     e7c:	11 24       	eor	r1, r1
     e7e:	91 1d       	adc	r25, r1
     e80:	b2 9f       	mul	r27, r18
     e82:	70 0d       	add	r23, r0
     e84:	81 1d       	adc	r24, r1
     e86:	11 24       	eor	r1, r1
     e88:	91 1d       	adc	r25, r1
     e8a:	08 95       	ret

00000e8c <__udivmodhi4>:
     e8c:	aa 1b       	sub	r26, r26
     e8e:	bb 1b       	sub	r27, r27
     e90:	51 e1       	ldi	r21, 0x11	; 17
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <__udivmodhi4_ep>

00000e94 <__udivmodhi4_loop>:
     e94:	aa 1f       	adc	r26, r26
     e96:	bb 1f       	adc	r27, r27
     e98:	a6 17       	cp	r26, r22
     e9a:	b7 07       	cpc	r27, r23
     e9c:	10 f0       	brcs	.+4      	; 0xea2 <__udivmodhi4_ep>
     e9e:	a6 1b       	sub	r26, r22
     ea0:	b7 0b       	sbc	r27, r23

00000ea2 <__udivmodhi4_ep>:
     ea2:	88 1f       	adc	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	5a 95       	dec	r21
     ea8:	a9 f7       	brne	.-22     	; 0xe94 <__udivmodhi4_loop>
     eaa:	80 95       	com	r24
     eac:	90 95       	com	r25
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	08 95       	ret

00000eb4 <atoi>:
     eb4:	fc 01       	movw	r30, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	99 27       	eor	r25, r25
     eba:	e8 94       	clt
     ebc:	21 91       	ld	r18, Z+
     ebe:	20 32       	cpi	r18, 0x20	; 32
     ec0:	e9 f3       	breq	.-6      	; 0xebc <atoi+0x8>
     ec2:	29 30       	cpi	r18, 0x09	; 9
     ec4:	10 f0       	brcs	.+4      	; 0xeca <atoi+0x16>
     ec6:	2e 30       	cpi	r18, 0x0E	; 14
     ec8:	c8 f3       	brcs	.-14     	; 0xebc <atoi+0x8>
     eca:	2b 32       	cpi	r18, 0x2B	; 43
     ecc:	39 f0       	breq	.+14     	; 0xedc <atoi+0x28>
     ece:	2d 32       	cpi	r18, 0x2D	; 45
     ed0:	31 f4       	brne	.+12     	; 0xede <atoi+0x2a>
     ed2:	68 94       	set
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <atoi+0x28>
     ed6:	0b d0       	rcall	.+22     	; 0xeee <__mulhi_const_10>
     ed8:	82 0f       	add	r24, r18
     eda:	91 1d       	adc	r25, r1
     edc:	21 91       	ld	r18, Z+
     ede:	20 53       	subi	r18, 0x30	; 48
     ee0:	2a 30       	cpi	r18, 0x0A	; 10
     ee2:	c8 f3       	brcs	.-14     	; 0xed6 <atoi+0x22>
     ee4:	1e f4       	brtc	.+6      	; 0xeec <atoi+0x38>
     ee6:	90 95       	com	r25
     ee8:	81 95       	neg	r24
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	08 95       	ret

00000eee <__mulhi_const_10>:
     eee:	7a e0       	ldi	r23, 0x0A	; 10
     ef0:	97 9f       	mul	r25, r23
     ef2:	90 2d       	mov	r25, r0
     ef4:	87 9f       	mul	r24, r23
     ef6:	80 2d       	mov	r24, r0
     ef8:	91 0d       	add	r25, r1
     efa:	11 24       	eor	r1, r1
     efc:	08 95       	ret

00000efe <sprintf>:
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2e 97       	sbiw	r28, 0x0e	; 14
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	0d 89       	ldd	r16, Y+21	; 0x15
     f18:	1e 89       	ldd	r17, Y+22	; 0x16
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	8c 83       	std	Y+4, r24	; 0x04
     f1e:	1a 83       	std	Y+2, r17	; 0x02
     f20:	09 83       	std	Y+1, r16	; 0x01
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	9f e7       	ldi	r25, 0x7F	; 127
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
     f2a:	ae 01       	movw	r20, r28
     f2c:	47 5e       	subi	r20, 0xE7	; 231
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	6f 89       	ldd	r22, Y+23	; 0x17
     f32:	78 8d       	ldd	r23, Y+24	; 0x18
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	10 d0       	rcall	.+32     	; 0xf5a <vfprintf>
     f3a:	ef 81       	ldd	r30, Y+7	; 0x07
     f3c:	f8 85       	ldd	r31, Y+8	; 0x08
     f3e:	e0 0f       	add	r30, r16
     f40:	f1 1f       	adc	r31, r17
     f42:	10 82       	st	Z, r1
     f44:	2e 96       	adiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <vfprintf>:
     f5a:	2f 92       	push	r2
     f5c:	3f 92       	push	r3
     f5e:	4f 92       	push	r4
     f60:	5f 92       	push	r5
     f62:	6f 92       	push	r6
     f64:	7f 92       	push	r7
     f66:	8f 92       	push	r8
     f68:	9f 92       	push	r9
     f6a:	af 92       	push	r10
     f6c:	bf 92       	push	r11
     f6e:	cf 92       	push	r12
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	2b 97       	sbiw	r28, 0x0b	; 11
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	6c 01       	movw	r12, r24
     f90:	7b 01       	movw	r14, r22
     f92:	8a 01       	movw	r16, r20
     f94:	fc 01       	movw	r30, r24
     f96:	17 82       	std	Z+7, r1	; 0x07
     f98:	16 82       	std	Z+6, r1	; 0x06
     f9a:	83 81       	ldd	r24, Z+3	; 0x03
     f9c:	81 ff       	sbrs	r24, 1
     f9e:	bf c1       	rjmp	.+894    	; 0x131e <__stack+0x21f>
     fa0:	ce 01       	movw	r24, r28
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	3c 01       	movw	r6, r24
     fa6:	f6 01       	movw	r30, r12
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	f7 01       	movw	r30, r14
     fac:	93 fd       	sbrc	r25, 3
     fae:	85 91       	lpm	r24, Z+
     fb0:	93 ff       	sbrs	r25, 3
     fb2:	81 91       	ld	r24, Z+
     fb4:	7f 01       	movw	r14, r30
     fb6:	88 23       	and	r24, r24
     fb8:	09 f4       	brne	.+2      	; 0xfbc <vfprintf+0x62>
     fba:	ad c1       	rjmp	.+858    	; 0x1316 <__stack+0x217>
     fbc:	85 32       	cpi	r24, 0x25	; 37
     fbe:	39 f4       	brne	.+14     	; 0xfce <vfprintf+0x74>
     fc0:	93 fd       	sbrc	r25, 3
     fc2:	85 91       	lpm	r24, Z+
     fc4:	93 ff       	sbrs	r25, 3
     fc6:	81 91       	ld	r24, Z+
     fc8:	7f 01       	movw	r14, r30
     fca:	85 32       	cpi	r24, 0x25	; 37
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <vfprintf+0x7c>
     fce:	b6 01       	movw	r22, r12
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	d6 d1       	rcall	.+940    	; 0x1380 <fputc>
     fd4:	e8 cf       	rjmp	.-48     	; 0xfa6 <vfprintf+0x4c>
     fd6:	91 2c       	mov	r9, r1
     fd8:	21 2c       	mov	r2, r1
     fda:	31 2c       	mov	r3, r1
     fdc:	ff e1       	ldi	r31, 0x1F	; 31
     fde:	f3 15       	cp	r31, r3
     fe0:	d8 f0       	brcs	.+54     	; 0x1018 <vfprintf+0xbe>
     fe2:	8b 32       	cpi	r24, 0x2B	; 43
     fe4:	79 f0       	breq	.+30     	; 0x1004 <vfprintf+0xaa>
     fe6:	38 f4       	brcc	.+14     	; 0xff6 <vfprintf+0x9c>
     fe8:	80 32       	cpi	r24, 0x20	; 32
     fea:	79 f0       	breq	.+30     	; 0x100a <vfprintf+0xb0>
     fec:	83 32       	cpi	r24, 0x23	; 35
     fee:	a1 f4       	brne	.+40     	; 0x1018 <vfprintf+0xbe>
     ff0:	23 2d       	mov	r18, r3
     ff2:	20 61       	ori	r18, 0x10	; 16
     ff4:	1d c0       	rjmp	.+58     	; 0x1030 <vfprintf+0xd6>
     ff6:	8d 32       	cpi	r24, 0x2D	; 45
     ff8:	61 f0       	breq	.+24     	; 0x1012 <vfprintf+0xb8>
     ffa:	80 33       	cpi	r24, 0x30	; 48
     ffc:	69 f4       	brne	.+26     	; 0x1018 <vfprintf+0xbe>
     ffe:	23 2d       	mov	r18, r3
    1000:	21 60       	ori	r18, 0x01	; 1
    1002:	16 c0       	rjmp	.+44     	; 0x1030 <vfprintf+0xd6>
    1004:	83 2d       	mov	r24, r3
    1006:	82 60       	ori	r24, 0x02	; 2
    1008:	38 2e       	mov	r3, r24
    100a:	e3 2d       	mov	r30, r3
    100c:	e4 60       	ori	r30, 0x04	; 4
    100e:	3e 2e       	mov	r3, r30
    1010:	2a c0       	rjmp	.+84     	; 0x1066 <vfprintf+0x10c>
    1012:	f3 2d       	mov	r31, r3
    1014:	f8 60       	ori	r31, 0x08	; 8
    1016:	1d c0       	rjmp	.+58     	; 0x1052 <vfprintf+0xf8>
    1018:	37 fc       	sbrc	r3, 7
    101a:	2d c0       	rjmp	.+90     	; 0x1076 <vfprintf+0x11c>
    101c:	20 ed       	ldi	r18, 0xD0	; 208
    101e:	28 0f       	add	r18, r24
    1020:	2a 30       	cpi	r18, 0x0A	; 10
    1022:	40 f0       	brcs	.+16     	; 0x1034 <vfprintf+0xda>
    1024:	8e 32       	cpi	r24, 0x2E	; 46
    1026:	b9 f4       	brne	.+46     	; 0x1056 <vfprintf+0xfc>
    1028:	36 fc       	sbrc	r3, 6
    102a:	75 c1       	rjmp	.+746    	; 0x1316 <__stack+0x217>
    102c:	23 2d       	mov	r18, r3
    102e:	20 64       	ori	r18, 0x40	; 64
    1030:	32 2e       	mov	r3, r18
    1032:	19 c0       	rjmp	.+50     	; 0x1066 <vfprintf+0x10c>
    1034:	36 fe       	sbrs	r3, 6
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <vfprintf+0xea>
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	98 9e       	mul	r9, r24
    103c:	20 0d       	add	r18, r0
    103e:	11 24       	eor	r1, r1
    1040:	92 2e       	mov	r9, r18
    1042:	11 c0       	rjmp	.+34     	; 0x1066 <vfprintf+0x10c>
    1044:	ea e0       	ldi	r30, 0x0A	; 10
    1046:	2e 9e       	mul	r2, r30
    1048:	20 0d       	add	r18, r0
    104a:	11 24       	eor	r1, r1
    104c:	22 2e       	mov	r2, r18
    104e:	f3 2d       	mov	r31, r3
    1050:	f0 62       	ori	r31, 0x20	; 32
    1052:	3f 2e       	mov	r3, r31
    1054:	08 c0       	rjmp	.+16     	; 0x1066 <vfprintf+0x10c>
    1056:	8c 36       	cpi	r24, 0x6C	; 108
    1058:	21 f4       	brne	.+8      	; 0x1062 <vfprintf+0x108>
    105a:	83 2d       	mov	r24, r3
    105c:	80 68       	ori	r24, 0x80	; 128
    105e:	38 2e       	mov	r3, r24
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x10c>
    1062:	88 36       	cpi	r24, 0x68	; 104
    1064:	41 f4       	brne	.+16     	; 0x1076 <vfprintf+0x11c>
    1066:	f7 01       	movw	r30, r14
    1068:	93 fd       	sbrc	r25, 3
    106a:	85 91       	lpm	r24, Z+
    106c:	93 ff       	sbrs	r25, 3
    106e:	81 91       	ld	r24, Z+
    1070:	7f 01       	movw	r14, r30
    1072:	81 11       	cpse	r24, r1
    1074:	b3 cf       	rjmp	.-154    	; 0xfdc <vfprintf+0x82>
    1076:	98 2f       	mov	r25, r24
    1078:	9f 7d       	andi	r25, 0xDF	; 223
    107a:	95 54       	subi	r25, 0x45	; 69
    107c:	93 30       	cpi	r25, 0x03	; 3
    107e:	28 f4       	brcc	.+10     	; 0x108a <vfprintf+0x130>
    1080:	0c 5f       	subi	r16, 0xFC	; 252
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	9f e3       	ldi	r25, 0x3F	; 63
    1086:	99 83       	std	Y+1, r25	; 0x01
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <vfprintf+0x14a>
    108a:	83 36       	cpi	r24, 0x63	; 99
    108c:	31 f0       	breq	.+12     	; 0x109a <vfprintf+0x140>
    108e:	83 37       	cpi	r24, 0x73	; 115
    1090:	71 f0       	breq	.+28     	; 0x10ae <vfprintf+0x154>
    1092:	83 35       	cpi	r24, 0x53	; 83
    1094:	09 f0       	breq	.+2      	; 0x1098 <vfprintf+0x13e>
    1096:	55 c0       	rjmp	.+170    	; 0x1142 <__stack+0x43>
    1098:	20 c0       	rjmp	.+64     	; 0x10da <vfprintf+0x180>
    109a:	f8 01       	movw	r30, r16
    109c:	80 81       	ld	r24, Z
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	0e 5f       	subi	r16, 0xFE	; 254
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	88 24       	eor	r8, r8
    10a6:	83 94       	inc	r8
    10a8:	91 2c       	mov	r9, r1
    10aa:	53 01       	movw	r10, r6
    10ac:	12 c0       	rjmp	.+36     	; 0x10d2 <vfprintf+0x178>
    10ae:	28 01       	movw	r4, r16
    10b0:	f2 e0       	ldi	r31, 0x02	; 2
    10b2:	4f 0e       	add	r4, r31
    10b4:	51 1c       	adc	r5, r1
    10b6:	f8 01       	movw	r30, r16
    10b8:	a0 80       	ld	r10, Z
    10ba:	b1 80       	ldd	r11, Z+1	; 0x01
    10bc:	36 fe       	sbrs	r3, 6
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <vfprintf+0x16c>
    10c0:	69 2d       	mov	r22, r9
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <vfprintf+0x170>
    10c6:	6f ef       	ldi	r22, 0xFF	; 255
    10c8:	7f ef       	ldi	r23, 0xFF	; 255
    10ca:	c5 01       	movw	r24, r10
    10cc:	4e d1       	rcall	.+668    	; 0x136a <strnlen>
    10ce:	4c 01       	movw	r8, r24
    10d0:	82 01       	movw	r16, r4
    10d2:	f3 2d       	mov	r31, r3
    10d4:	ff 77       	andi	r31, 0x7F	; 127
    10d6:	3f 2e       	mov	r3, r31
    10d8:	15 c0       	rjmp	.+42     	; 0x1104 <__stack+0x5>
    10da:	28 01       	movw	r4, r16
    10dc:	22 e0       	ldi	r18, 0x02	; 2
    10de:	42 0e       	add	r4, r18
    10e0:	51 1c       	adc	r5, r1
    10e2:	f8 01       	movw	r30, r16
    10e4:	a0 80       	ld	r10, Z
    10e6:	b1 80       	ldd	r11, Z+1	; 0x01
    10e8:	36 fe       	sbrs	r3, 6
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <vfprintf+0x198>
    10ec:	69 2d       	mov	r22, r9
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <vfprintf+0x19c>
    10f2:	6f ef       	ldi	r22, 0xFF	; 255
    10f4:	7f ef       	ldi	r23, 0xFF	; 255
    10f6:	c5 01       	movw	r24, r10
    10f8:	2d d1       	rcall	.+602    	; 0x1354 <strnlen_P>
    10fa:	4c 01       	movw	r8, r24
    10fc:	f3 2d       	mov	r31, r3
    10fe:	f0 68       	ori	r31, 0x80	; 128
    1100:	3f 2e       	mov	r3, r31
    1102:	82 01       	movw	r16, r4
    1104:	33 fc       	sbrc	r3, 3
    1106:	19 c0       	rjmp	.+50     	; 0x113a <__stack+0x3b>
    1108:	82 2d       	mov	r24, r2
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	88 16       	cp	r8, r24
    110e:	99 06       	cpc	r9, r25
    1110:	a0 f4       	brcc	.+40     	; 0x113a <__stack+0x3b>
    1112:	b6 01       	movw	r22, r12
    1114:	80 e2       	ldi	r24, 0x20	; 32
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	33 d1       	rcall	.+614    	; 0x1380 <fputc>
    111a:	2a 94       	dec	r2
    111c:	f5 cf       	rjmp	.-22     	; 0x1108 <__stack+0x9>
    111e:	f5 01       	movw	r30, r10
    1120:	37 fc       	sbrc	r3, 7
    1122:	85 91       	lpm	r24, Z+
    1124:	37 fe       	sbrs	r3, 7
    1126:	81 91       	ld	r24, Z+
    1128:	5f 01       	movw	r10, r30
    112a:	b6 01       	movw	r22, r12
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	28 d1       	rcall	.+592    	; 0x1380 <fputc>
    1130:	21 10       	cpse	r2, r1
    1132:	2a 94       	dec	r2
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	82 1a       	sub	r8, r18
    1138:	91 08       	sbc	r9, r1
    113a:	81 14       	cp	r8, r1
    113c:	91 04       	cpc	r9, r1
    113e:	79 f7       	brne	.-34     	; 0x111e <__stack+0x1f>
    1140:	e1 c0       	rjmp	.+450    	; 0x1304 <__stack+0x205>
    1142:	84 36       	cpi	r24, 0x64	; 100
    1144:	11 f0       	breq	.+4      	; 0x114a <__stack+0x4b>
    1146:	89 36       	cpi	r24, 0x69	; 105
    1148:	39 f5       	brne	.+78     	; 0x1198 <__stack+0x99>
    114a:	f8 01       	movw	r30, r16
    114c:	37 fe       	sbrs	r3, 7
    114e:	07 c0       	rjmp	.+14     	; 0x115e <__stack+0x5f>
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	0c 5f       	subi	r16, 0xFC	; 252
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	08 c0       	rjmp	.+16     	; 0x116e <__stack+0x6f>
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	07 2e       	mov	r0, r23
    1164:	00 0c       	add	r0, r0
    1166:	88 0b       	sbc	r24, r24
    1168:	99 0b       	sbc	r25, r25
    116a:	0e 5f       	subi	r16, 0xFE	; 254
    116c:	1f 4f       	sbci	r17, 0xFF	; 255
    116e:	f3 2d       	mov	r31, r3
    1170:	ff 76       	andi	r31, 0x6F	; 111
    1172:	3f 2e       	mov	r3, r31
    1174:	97 ff       	sbrs	r25, 7
    1176:	09 c0       	rjmp	.+18     	; 0x118a <__stack+0x8b>
    1178:	90 95       	com	r25
    117a:	80 95       	com	r24
    117c:	70 95       	com	r23
    117e:	61 95       	neg	r22
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	f0 68       	ori	r31, 0x80	; 128
    1188:	3f 2e       	mov	r3, r31
    118a:	2a e0       	ldi	r18, 0x0A	; 10
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	a3 01       	movw	r20, r6
    1190:	33 d1       	rcall	.+614    	; 0x13f8 <__ultoa_invert>
    1192:	88 2e       	mov	r8, r24
    1194:	86 18       	sub	r8, r6
    1196:	44 c0       	rjmp	.+136    	; 0x1220 <__stack+0x121>
    1198:	85 37       	cpi	r24, 0x75	; 117
    119a:	31 f4       	brne	.+12     	; 0x11a8 <__stack+0xa9>
    119c:	23 2d       	mov	r18, r3
    119e:	2f 7e       	andi	r18, 0xEF	; 239
    11a0:	b2 2e       	mov	r11, r18
    11a2:	2a e0       	ldi	r18, 0x0A	; 10
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	25 c0       	rjmp	.+74     	; 0x11f2 <__stack+0xf3>
    11a8:	93 2d       	mov	r25, r3
    11aa:	99 7f       	andi	r25, 0xF9	; 249
    11ac:	b9 2e       	mov	r11, r25
    11ae:	8f 36       	cpi	r24, 0x6F	; 111
    11b0:	c1 f0       	breq	.+48     	; 0x11e2 <__stack+0xe3>
    11b2:	18 f4       	brcc	.+6      	; 0x11ba <__stack+0xbb>
    11b4:	88 35       	cpi	r24, 0x58	; 88
    11b6:	79 f0       	breq	.+30     	; 0x11d6 <__stack+0xd7>
    11b8:	ae c0       	rjmp	.+348    	; 0x1316 <__stack+0x217>
    11ba:	80 37       	cpi	r24, 0x70	; 112
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <__stack+0xc5>
    11be:	88 37       	cpi	r24, 0x78	; 120
    11c0:	21 f0       	breq	.+8      	; 0x11ca <__stack+0xcb>
    11c2:	a9 c0       	rjmp	.+338    	; 0x1316 <__stack+0x217>
    11c4:	e9 2f       	mov	r30, r25
    11c6:	e0 61       	ori	r30, 0x10	; 16
    11c8:	be 2e       	mov	r11, r30
    11ca:	b4 fe       	sbrs	r11, 4
    11cc:	0d c0       	rjmp	.+26     	; 0x11e8 <__stack+0xe9>
    11ce:	fb 2d       	mov	r31, r11
    11d0:	f4 60       	ori	r31, 0x04	; 4
    11d2:	bf 2e       	mov	r11, r31
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <__stack+0xe9>
    11d6:	34 fe       	sbrs	r3, 4
    11d8:	0a c0       	rjmp	.+20     	; 0x11ee <__stack+0xef>
    11da:	29 2f       	mov	r18, r25
    11dc:	26 60       	ori	r18, 0x06	; 6
    11de:	b2 2e       	mov	r11, r18
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <__stack+0xef>
    11e2:	28 e0       	ldi	r18, 0x08	; 8
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <__stack+0xf3>
    11e8:	20 e1       	ldi	r18, 0x10	; 16
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <__stack+0xf3>
    11ee:	20 e1       	ldi	r18, 0x10	; 16
    11f0:	32 e0       	ldi	r19, 0x02	; 2
    11f2:	f8 01       	movw	r30, r16
    11f4:	b7 fe       	sbrs	r11, 7
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <__stack+0x107>
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	0c 5f       	subi	r16, 0xFC	; 252
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <__stack+0x113>
    1206:	60 81       	ld	r22, Z
    1208:	71 81       	ldd	r23, Z+1	; 0x01
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 5f       	subi	r16, 0xFE	; 254
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	a3 01       	movw	r20, r6
    1214:	f1 d0       	rcall	.+482    	; 0x13f8 <__ultoa_invert>
    1216:	88 2e       	mov	r8, r24
    1218:	86 18       	sub	r8, r6
    121a:	fb 2d       	mov	r31, r11
    121c:	ff 77       	andi	r31, 0x7F	; 127
    121e:	3f 2e       	mov	r3, r31
    1220:	36 fe       	sbrs	r3, 6
    1222:	0d c0       	rjmp	.+26     	; 0x123e <__stack+0x13f>
    1224:	23 2d       	mov	r18, r3
    1226:	2e 7f       	andi	r18, 0xFE	; 254
    1228:	a2 2e       	mov	r10, r18
    122a:	89 14       	cp	r8, r9
    122c:	58 f4       	brcc	.+22     	; 0x1244 <__stack+0x145>
    122e:	34 fe       	sbrs	r3, 4
    1230:	0b c0       	rjmp	.+22     	; 0x1248 <__stack+0x149>
    1232:	32 fc       	sbrc	r3, 2
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <__stack+0x149>
    1236:	83 2d       	mov	r24, r3
    1238:	8e 7e       	andi	r24, 0xEE	; 238
    123a:	a8 2e       	mov	r10, r24
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <__stack+0x149>
    123e:	b8 2c       	mov	r11, r8
    1240:	a3 2c       	mov	r10, r3
    1242:	03 c0       	rjmp	.+6      	; 0x124a <__stack+0x14b>
    1244:	b8 2c       	mov	r11, r8
    1246:	01 c0       	rjmp	.+2      	; 0x124a <__stack+0x14b>
    1248:	b9 2c       	mov	r11, r9
    124a:	a4 fe       	sbrs	r10, 4
    124c:	0f c0       	rjmp	.+30     	; 0x126c <__stack+0x16d>
    124e:	fe 01       	movw	r30, r28
    1250:	e8 0d       	add	r30, r8
    1252:	f1 1d       	adc	r31, r1
    1254:	80 81       	ld	r24, Z
    1256:	80 33       	cpi	r24, 0x30	; 48
    1258:	21 f4       	brne	.+8      	; 0x1262 <__stack+0x163>
    125a:	9a 2d       	mov	r25, r10
    125c:	99 7e       	andi	r25, 0xE9	; 233
    125e:	a9 2e       	mov	r10, r25
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <__stack+0x175>
    1262:	a2 fe       	sbrs	r10, 2
    1264:	06 c0       	rjmp	.+12     	; 0x1272 <__stack+0x173>
    1266:	b3 94       	inc	r11
    1268:	b3 94       	inc	r11
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <__stack+0x175>
    126c:	8a 2d       	mov	r24, r10
    126e:	86 78       	andi	r24, 0x86	; 134
    1270:	09 f0       	breq	.+2      	; 0x1274 <__stack+0x175>
    1272:	b3 94       	inc	r11
    1274:	a3 fc       	sbrc	r10, 3
    1276:	10 c0       	rjmp	.+32     	; 0x1298 <__stack+0x199>
    1278:	a0 fe       	sbrs	r10, 0
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <__stack+0x189>
    127c:	b2 14       	cp	r11, r2
    127e:	80 f4       	brcc	.+32     	; 0x12a0 <__stack+0x1a1>
    1280:	28 0c       	add	r2, r8
    1282:	92 2c       	mov	r9, r2
    1284:	9b 18       	sub	r9, r11
    1286:	0d c0       	rjmp	.+26     	; 0x12a2 <__stack+0x1a3>
    1288:	b2 14       	cp	r11, r2
    128a:	58 f4       	brcc	.+22     	; 0x12a2 <__stack+0x1a3>
    128c:	b6 01       	movw	r22, r12
    128e:	80 e2       	ldi	r24, 0x20	; 32
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	76 d0       	rcall	.+236    	; 0x1380 <fputc>
    1294:	b3 94       	inc	r11
    1296:	f8 cf       	rjmp	.-16     	; 0x1288 <__stack+0x189>
    1298:	b2 14       	cp	r11, r2
    129a:	18 f4       	brcc	.+6      	; 0x12a2 <__stack+0x1a3>
    129c:	2b 18       	sub	r2, r11
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <__stack+0x1a5>
    12a0:	98 2c       	mov	r9, r8
    12a2:	21 2c       	mov	r2, r1
    12a4:	a4 fe       	sbrs	r10, 4
    12a6:	0f c0       	rjmp	.+30     	; 0x12c6 <__stack+0x1c7>
    12a8:	b6 01       	movw	r22, r12
    12aa:	80 e3       	ldi	r24, 0x30	; 48
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	68 d0       	rcall	.+208    	; 0x1380 <fputc>
    12b0:	a2 fe       	sbrs	r10, 2
    12b2:	16 c0       	rjmp	.+44     	; 0x12e0 <__stack+0x1e1>
    12b4:	a1 fc       	sbrc	r10, 1
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <__stack+0x1bf>
    12b8:	88 e7       	ldi	r24, 0x78	; 120
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <__stack+0x1c3>
    12be:	88 e5       	ldi	r24, 0x58	; 88
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	b6 01       	movw	r22, r12
    12c4:	0c c0       	rjmp	.+24     	; 0x12de <__stack+0x1df>
    12c6:	8a 2d       	mov	r24, r10
    12c8:	86 78       	andi	r24, 0x86	; 134
    12ca:	51 f0       	breq	.+20     	; 0x12e0 <__stack+0x1e1>
    12cc:	a1 fe       	sbrs	r10, 1
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <__stack+0x1d5>
    12d0:	8b e2       	ldi	r24, 0x2B	; 43
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <__stack+0x1d7>
    12d4:	80 e2       	ldi	r24, 0x20	; 32
    12d6:	a7 fc       	sbrc	r10, 7
    12d8:	8d e2       	ldi	r24, 0x2D	; 45
    12da:	b6 01       	movw	r22, r12
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	50 d0       	rcall	.+160    	; 0x1380 <fputc>
    12e0:	89 14       	cp	r8, r9
    12e2:	30 f4       	brcc	.+12     	; 0x12f0 <__stack+0x1f1>
    12e4:	b6 01       	movw	r22, r12
    12e6:	80 e3       	ldi	r24, 0x30	; 48
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	4a d0       	rcall	.+148    	; 0x1380 <fputc>
    12ec:	9a 94       	dec	r9
    12ee:	f8 cf       	rjmp	.-16     	; 0x12e0 <__stack+0x1e1>
    12f0:	8a 94       	dec	r8
    12f2:	f3 01       	movw	r30, r6
    12f4:	e8 0d       	add	r30, r8
    12f6:	f1 1d       	adc	r31, r1
    12f8:	80 81       	ld	r24, Z
    12fa:	b6 01       	movw	r22, r12
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	40 d0       	rcall	.+128    	; 0x1380 <fputc>
    1300:	81 10       	cpse	r8, r1
    1302:	f6 cf       	rjmp	.-20     	; 0x12f0 <__stack+0x1f1>
    1304:	22 20       	and	r2, r2
    1306:	09 f4       	brne	.+2      	; 0x130a <__stack+0x20b>
    1308:	4e ce       	rjmp	.-868    	; 0xfa6 <vfprintf+0x4c>
    130a:	b6 01       	movw	r22, r12
    130c:	80 e2       	ldi	r24, 0x20	; 32
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	37 d0       	rcall	.+110    	; 0x1380 <fputc>
    1312:	2a 94       	dec	r2
    1314:	f7 cf       	rjmp	.-18     	; 0x1304 <__stack+0x205>
    1316:	f6 01       	movw	r30, r12
    1318:	86 81       	ldd	r24, Z+6	; 0x06
    131a:	97 81       	ldd	r25, Z+7	; 0x07
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <__stack+0x223>
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    1322:	2b 96       	adiw	r28, 0x0b	; 11
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	bf 90       	pop	r11
    1340:	af 90       	pop	r10
    1342:	9f 90       	pop	r9
    1344:	8f 90       	pop	r8
    1346:	7f 90       	pop	r7
    1348:	6f 90       	pop	r6
    134a:	5f 90       	pop	r5
    134c:	4f 90       	pop	r4
    134e:	3f 90       	pop	r3
    1350:	2f 90       	pop	r2
    1352:	08 95       	ret

00001354 <strnlen_P>:
    1354:	fc 01       	movw	r30, r24
    1356:	05 90       	lpm	r0, Z+
    1358:	61 50       	subi	r22, 0x01	; 1
    135a:	70 40       	sbci	r23, 0x00	; 0
    135c:	01 10       	cpse	r0, r1
    135e:	d8 f7       	brcc	.-10     	; 0x1356 <strnlen_P+0x2>
    1360:	80 95       	com	r24
    1362:	90 95       	com	r25
    1364:	8e 0f       	add	r24, r30
    1366:	9f 1f       	adc	r25, r31
    1368:	08 95       	ret

0000136a <strnlen>:
    136a:	fc 01       	movw	r30, r24
    136c:	61 50       	subi	r22, 0x01	; 1
    136e:	70 40       	sbci	r23, 0x00	; 0
    1370:	01 90       	ld	r0, Z+
    1372:	01 10       	cpse	r0, r1
    1374:	d8 f7       	brcc	.-10     	; 0x136c <strnlen+0x2>
    1376:	80 95       	com	r24
    1378:	90 95       	com	r25
    137a:	8e 0f       	add	r24, r30
    137c:	9f 1f       	adc	r25, r31
    137e:	08 95       	ret

00001380 <fputc>:
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	fb 01       	movw	r30, r22
    138a:	23 81       	ldd	r18, Z+3	; 0x03
    138c:	21 fd       	sbrc	r18, 1
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <fputc+0x16>
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	9f ef       	ldi	r25, 0xFF	; 255
    1394:	2c c0       	rjmp	.+88     	; 0x13ee <fputc+0x6e>
    1396:	22 ff       	sbrs	r18, 2
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <fputc+0x46>
    139a:	46 81       	ldd	r20, Z+6	; 0x06
    139c:	57 81       	ldd	r21, Z+7	; 0x07
    139e:	24 81       	ldd	r18, Z+4	; 0x04
    13a0:	35 81       	ldd	r19, Z+5	; 0x05
    13a2:	42 17       	cp	r20, r18
    13a4:	53 07       	cpc	r21, r19
    13a6:	44 f4       	brge	.+16     	; 0x13b8 <fputc+0x38>
    13a8:	a0 81       	ld	r26, Z
    13aa:	b1 81       	ldd	r27, Z+1	; 0x01
    13ac:	9d 01       	movw	r18, r26
    13ae:	2f 5f       	subi	r18, 0xFF	; 255
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	31 83       	std	Z+1, r19	; 0x01
    13b4:	20 83       	st	Z, r18
    13b6:	8c 93       	st	X, r24
    13b8:	26 81       	ldd	r18, Z+6	; 0x06
    13ba:	37 81       	ldd	r19, Z+7	; 0x07
    13bc:	2f 5f       	subi	r18, 0xFF	; 255
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	37 83       	std	Z+7, r19	; 0x07
    13c2:	26 83       	std	Z+6, r18	; 0x06
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <fputc+0x6e>
    13c6:	8b 01       	movw	r16, r22
    13c8:	ec 01       	movw	r28, r24
    13ca:	fb 01       	movw	r30, r22
    13cc:	00 84       	ldd	r0, Z+8	; 0x08
    13ce:	f1 85       	ldd	r31, Z+9	; 0x09
    13d0:	e0 2d       	mov	r30, r0
    13d2:	09 95       	icall
    13d4:	89 2b       	or	r24, r25
    13d6:	e1 f6       	brne	.-72     	; 0x1390 <fputc+0x10>
    13d8:	d8 01       	movw	r26, r16
    13da:	16 96       	adiw	r26, 0x06	; 6
    13dc:	8d 91       	ld	r24, X+
    13de:	9c 91       	ld	r25, X
    13e0:	17 97       	sbiw	r26, 0x07	; 7
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	17 96       	adiw	r26, 0x07	; 7
    13e6:	9c 93       	st	X, r25
    13e8:	8e 93       	st	-X, r24
    13ea:	16 97       	sbiw	r26, 0x06	; 6
    13ec:	ce 01       	movw	r24, r28
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	08 95       	ret

000013f8 <__ultoa_invert>:
    13f8:	fa 01       	movw	r30, r20
    13fa:	aa 27       	eor	r26, r26
    13fc:	28 30       	cpi	r18, 0x08	; 8
    13fe:	51 f1       	breq	.+84     	; 0x1454 <__ultoa_invert+0x5c>
    1400:	20 31       	cpi	r18, 0x10	; 16
    1402:	81 f1       	breq	.+96     	; 0x1464 <__ultoa_invert+0x6c>
    1404:	e8 94       	clt
    1406:	6f 93       	push	r22
    1408:	6e 7f       	andi	r22, 0xFE	; 254
    140a:	6e 5f       	subi	r22, 0xFE	; 254
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	8f 4f       	sbci	r24, 0xFF	; 255
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	af 4f       	sbci	r26, 0xFF	; 255
    1414:	b1 e0       	ldi	r27, 0x01	; 1
    1416:	3e d0       	rcall	.+124    	; 0x1494 <__ultoa_invert+0x9c>
    1418:	b4 e0       	ldi	r27, 0x04	; 4
    141a:	3c d0       	rcall	.+120    	; 0x1494 <__ultoa_invert+0x9c>
    141c:	67 0f       	add	r22, r23
    141e:	78 1f       	adc	r23, r24
    1420:	89 1f       	adc	r24, r25
    1422:	9a 1f       	adc	r25, r26
    1424:	a1 1d       	adc	r26, r1
    1426:	68 0f       	add	r22, r24
    1428:	79 1f       	adc	r23, r25
    142a:	8a 1f       	adc	r24, r26
    142c:	91 1d       	adc	r25, r1
    142e:	a1 1d       	adc	r26, r1
    1430:	6a 0f       	add	r22, r26
    1432:	71 1d       	adc	r23, r1
    1434:	81 1d       	adc	r24, r1
    1436:	91 1d       	adc	r25, r1
    1438:	a1 1d       	adc	r26, r1
    143a:	20 d0       	rcall	.+64     	; 0x147c <__ultoa_invert+0x84>
    143c:	09 f4       	brne	.+2      	; 0x1440 <__ultoa_invert+0x48>
    143e:	68 94       	set
    1440:	3f 91       	pop	r19
    1442:	2a e0       	ldi	r18, 0x0A	; 10
    1444:	26 9f       	mul	r18, r22
    1446:	11 24       	eor	r1, r1
    1448:	30 19       	sub	r19, r0
    144a:	30 5d       	subi	r19, 0xD0	; 208
    144c:	31 93       	st	Z+, r19
    144e:	de f6       	brtc	.-74     	; 0x1406 <__ultoa_invert+0xe>
    1450:	cf 01       	movw	r24, r30
    1452:	08 95       	ret
    1454:	46 2f       	mov	r20, r22
    1456:	47 70       	andi	r20, 0x07	; 7
    1458:	40 5d       	subi	r20, 0xD0	; 208
    145a:	41 93       	st	Z+, r20
    145c:	b3 e0       	ldi	r27, 0x03	; 3
    145e:	0f d0       	rcall	.+30     	; 0x147e <__ultoa_invert+0x86>
    1460:	c9 f7       	brne	.-14     	; 0x1454 <__ultoa_invert+0x5c>
    1462:	f6 cf       	rjmp	.-20     	; 0x1450 <__ultoa_invert+0x58>
    1464:	46 2f       	mov	r20, r22
    1466:	4f 70       	andi	r20, 0x0F	; 15
    1468:	40 5d       	subi	r20, 0xD0	; 208
    146a:	4a 33       	cpi	r20, 0x3A	; 58
    146c:	18 f0       	brcs	.+6      	; 0x1474 <__ultoa_invert+0x7c>
    146e:	49 5d       	subi	r20, 0xD9	; 217
    1470:	31 fd       	sbrc	r19, 1
    1472:	40 52       	subi	r20, 0x20	; 32
    1474:	41 93       	st	Z+, r20
    1476:	02 d0       	rcall	.+4      	; 0x147c <__ultoa_invert+0x84>
    1478:	a9 f7       	brne	.-22     	; 0x1464 <__ultoa_invert+0x6c>
    147a:	ea cf       	rjmp	.-44     	; 0x1450 <__ultoa_invert+0x58>
    147c:	b4 e0       	ldi	r27, 0x04	; 4
    147e:	a6 95       	lsr	r26
    1480:	97 95       	ror	r25
    1482:	87 95       	ror	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	ba 95       	dec	r27
    148a:	c9 f7       	brne	.-14     	; 0x147e <__ultoa_invert+0x86>
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 05       	cpc	r22, r1
    1490:	71 05       	cpc	r23, r1
    1492:	08 95       	ret
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	0a 2e       	mov	r0, r26
    149a:	06 94       	lsr	r0
    149c:	57 95       	ror	r21
    149e:	47 95       	ror	r20
    14a0:	37 95       	ror	r19
    14a2:	27 95       	ror	r18
    14a4:	ba 95       	dec	r27
    14a6:	c9 f7       	brne	.-14     	; 0x149a <__ultoa_invert+0xa2>
    14a8:	62 0f       	add	r22, r18
    14aa:	73 1f       	adc	r23, r19
    14ac:	84 1f       	adc	r24, r20
    14ae:	95 1f       	adc	r25, r21
    14b0:	a0 1d       	adc	r26, r0
    14b2:	08 95       	ret

000014b4 <_exit>:
    14b4:	f8 94       	cli

000014b6 <__stop_program>:
    14b6:	ff cf       	rjmp	.-2      	; 0x14b6 <__stop_program>
